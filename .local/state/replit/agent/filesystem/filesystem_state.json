{"file_contents":{"verify_order.py":{"content":"import asyncio\nimport re\nfrom playwright.async_api import async_playwright, expect\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=True)\n        page = await browser.new_page()\n\n        try:\n            # Intercept Firebase requests and simulate a server error\n            # to reliably trigger the mock data fallback mechanism.\n            await page.route(\n                re.compile(\"firestore.googleapis.com\"),\n                lambda route: route.fulfill(status=500, body=\"Simulated server error\")\n            )\n\n            await page.goto(\"http://localhost:8000\")\n\n            # 1. Set user as logged in to bypass the login modal for the \"Buy Now\" flow.\n            await page.evaluate(\"\"\"() => {\n                isLoggedIn = true;\n                currentUser = {\n                    uid: 'test_user_uid',\n                    name: 'Test User',\n                    email: 'test@example.com',\n                    role: 'customer',\n                    location: 'Lagos'\n                };\n                updateAuthUI();\n            }\"\"\")\n\n            # The page should now display mock listings.\n            # 2. Wait for a listing card to appear and click it.\n            listing_card = page.locator(\".listing-card\").first\n            await expect(listing_card).to_be_visible(timeout=10000)\n            await listing_card.click()\n\n            # 3. Wait for the detail page to load.\n            await expect(page.locator(\"#detail-title\")).to_be_visible()\n\n            # 4. Handle the 'confirm' and 'alert' dialogs that appear during purchase.\n            dialog_messages = []\n            page.on(\"dialog\", lambda dialog: dialog_messages.append(dialog.message) or dialog.accept())\n\n            # 5. Click the \"Buy Now\" button.\n            await page.locator(\"text=Buy Now\").click()\n\n            # 6. Wait for the dialogs to be processed.\n            await page.wait_for_timeout(2000)\n\n            # 7. Verify the order was \"created\" by checking the dialog messages.\n            # The first dialog should be a purchase confirmation.\n            assert any(\"Confirm purchase?\" in msg for msg in dialog_messages), \"Confirmation dialog did not appear.\"\n            # After our bug fix, the success alert should follow.\n            assert any(\"Order created successfully!\" in msg for msg in dialog_messages), \"Success alert did not appear.\"\n\n            print(\"✅ Test passed: 'Buy Now' functionality is working correctly after the fix.\")\n            await page.screenshot(path=\"verification_success.png\")\n\n        except Exception as e:\n            print(f\"❌ Test failed: {e}\")\n            await page.screenshot(path=\"verification_error.png\")\n            raise\n\n        finally:\n            await browser.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n","size_bytes":2830},"verify.py":{"content":"\nimport asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        page = await browser.new_page()\n\n        await page.goto(\"http://localhost:8000\")\n\n        # Desktop screenshot\n        await page.set_viewport_size({\"width\": 1280, \"height\": 800})\n        await page.screenshot(path=\"screenshot_desktop.png\")\n\n        await browser.close()\n\nasyncio.run(main())\n","size_bytes":471},"tests/test_view_count.py":{"content":"\nimport asyncio\nimport http.server\nimport socketserver\nimport threading\nimport pytest\nfrom playwright.async_api import async_playwright, expect\n\n# --- Test Configuration ---\nPORT = 8009\nBASE_URL = f\"http://localhost:{PORT}\"\nEXPECTED_PRODUCT_TITLE = \"Premium Brake Pads Set\"\n# The mock product's ID is 1, so the request path should contain 'inventory/1'\nEXPECTED_REQUEST_PATH = \"inventory/1\"\n\n# --- Server Fixture ---\n@pytest.fixture(scope=\"session\")\ndef http_server():\n    \"\"\"Starts a simple HTTP server in a separate thread for the test session.\"\"\"\n    handler = http.server.SimpleHTTPRequestHandler\n    httpd = socketserver.TCPServer((\"\", PORT), handler)\n    print(f\"Serving at port {PORT}\")\n    thread = threading.Thread(target=httpd.serve_forever)\n    thread.daemon = True\n    thread.start()\n    yield\n    print(\"Shutting down server.\")\n    httpd.shutdown()\n\n# --- Test Case ---\n@pytest.mark.asyncio\nasync def test_view_count_update_request(http_server):\n    \"\"\"\n    This test verifies that when a user clicks on a product, the application\n    sends a request to the correct Firestore collection ('inventory') to update\n    the view count.\n    \"\"\"\n    request_info = {\"intercepted\": False, \"path\": \"\"}\n\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        page = await browser.new_page()\n\n        async def handle_route(route):\n            \"\"\"Intercepts network requests to find the view count update.\"\"\"\n            if \"firestore.googleapis.com\" in route.request.url and \"UpdateDocument\" in route.request.url:\n                request_info[\"intercepted\"] = True\n                request_info[\"path\"] = route.request.url.split('v1/')[1]\n            await route.continue_()\n\n        await page.route(\"**/*\", handle_route)\n\n        try:\n            # 1. Arrange: Navigate to the page and force mock data to load\n            await page.goto(BASE_URL)\n\n            # Close the chatbot popup to prevent it from intercepting clicks\n            await page.click('.chatbot-toggle')\n            await page.wait_for_selector('.chatbot-window:not(.active)', timeout=2000)\n\n            await page.click('.hero-browse-btn')\n            await page.evaluate('loadListingsFromMock()')\n\n            # 2. Act: Click on the product card\n            product_card = page.locator(f'#listings-grid .listing-card:has-text(\"{EXPECTED_PRODUCT_TITLE}\")')\n            await product_card.wait_for(state=\"visible\", timeout=5000)\n            await product_card.click()\n\n            # Wait for the detail page to appear to ensure the click was successful\n            await expect(page.locator(\"#detail\")).to_be_visible()\n\n            # Give the async Firestore call a moment to fire\n            await page.wait_for_timeout(1000)\n\n        finally:\n            await browser.close()\n\n    # 3. Assert: Verify the correct network request was sent\n    assert request_info[\"intercepted\"], \"No Firestore update request was intercepted.\"\n    assert EXPECTED_REQUEST_PATH in request_info[\"path\"], \\\n        f\"Request was sent to the wrong path. Expected '{EXPECTED_REQUEST_PATH}', but got '{request_info['path']}'.\"\n","size_bytes":3116},"jules-scratch/verification/verify_order.py":{"content":"import asyncio\nimport re\nfrom playwright.async_api import async_playwright, expect\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=True)\n        page = await browser.new_page()\n\n        try:\n            # Capture and print console logs for debugging\n            page.on(\"console\", lambda msg: print(f\"Browser Console: {msg.text}\"))\n\n            # Let the request fail naturally due to sandbox network restrictions\n            await page.goto(\"http://localhost:8000\")\n\n            # 1. Set user as logged in to bypass the login modal for the \"Buy Now\" flow.\n            await page.evaluate(\"\"\"() => {\n                isLoggedIn = true;\n                currentUser = {\n                    uid: 'test_user_uid',\n                    name: 'Test User',\n                    email: 'test@example.com',\n                    role: 'customer',\n                    location: 'Lagos'\n                };\n                updateAuthUI();\n            }\"\"\")\n\n            # The page should now display mock listings.\n            # 2. Wait for a listing card to appear and click it.\n            listing_card = page.locator(\".listing-card\").first\n            await expect(listing_card).to_be_visible(timeout=10000)\n            await listing_card.click()\n\n            # 3. Wait for the detail page to load.\n            await expect(page.locator(\"#detail-title\")).to_be_visible()\n\n            # 4. Handle the 'confirm' and 'alert' dialogs that appear during purchase.\n            dialog_messages = []\n            page.on(\"dialog\", lambda dialog: dialog_messages.append(dialog.message) or dialog.accept())\n\n            # 5. Click the \"Buy Now\" button.\n            await page.locator(\"text=Buy Now\").click()\n\n            # 6. Wait for the dialogs to be processed.\n            await page.wait_for_timeout(2000)\n\n            # 7. Verify the order was \"created\" by checking the dialog messages.\n            # The first dialog should be a purchase confirmation.\n            assert any(\"Confirm purchase?\" in msg for msg in dialog_messages), \"Confirmation dialog did not appear.\"\n            # After our bug fix, the success alert should follow.\n            assert any(\"Order created successfully!\" in msg for msg in dialog_messages), \"Success alert did not appear.\"\n\n            print(\"✅ Test passed: 'Buy Now' functionality is working correctly after the fix.\")\n            await page.screenshot(path=\"jules-scratch/verification/verification.png\")\n\n        except Exception as e:\n            print(f\"❌ Test failed: {e}\")\n            await page.screenshot(path=\"jules-scratch/verification/verification_error.png\")\n            raise\n\n        finally:\n            await browser.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n","size_bytes":2773},"style.css":{"content":"body {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: #1a1a1a;\n    color: #e0e0e0;\n    line-height: 1.6;\n}\n\n* {\n    box-sizing: border-box;\n}\n\n/* Header */\n.header {\n    background-color: #2d2d2d;\n    padding: 1rem 0;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n    position: sticky;\n    top: 0;\n    z-index: 1000;\n    transition: all 0.3s ease;\n}\n\n.nav-container {\n    max-width: 1400px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 2rem;\n    gap: 2rem;\n}\n\n.logo {\n    display: flex;\n    align-items: center;\n    gap: 0.8rem;\n    cursor: pointer;\n    flex-shrink: 0;\n}\n\n.logo-image {\n    width: 45px;\n    height: 45px;\n    background: linear-gradient(135deg, #dc2626, #b91c1c);\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.5rem;\n    color: white;\n    box-shadow: 0 2px 8px rgba(220, 38, 38, 0.3);\n}\n\n.logo-text {\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: #dc2626;\n}\n\n.search-container-nav {\n    flex: 1;\n    max-width: 500px;\n    display: flex;\n    position: relative;\n}\n\n.search-input-nav {\n    width: 100%;\n    padding: 0.8rem 1rem;\n    border: 2px solid #404040;\n    border-radius: 25px;\n    background: #1a1a1a;\n    color: #e0e0e0;\n    font-size: 1rem;\n    outline: none;\n    transition: border-color 0.3s;\n}\n\n.search-input-nav:focus {\n    border-color: #dc2626;\n}\n\n.search-btn-nav {\n    position: absolute;\n    right: 5px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: #dc2626;\n    border: none;\n    border-radius: 20px;\n    padding: 0.5rem 1rem;\n    color: white;\n    cursor: pointer;\n    transition: background 0.3s;\n}\n\n.search-btn-nav:hover {\n    background: #b91c1c;\n}\n\n.nav-menu {\n    display: flex;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    gap: 2rem;\n    flex-shrink: 0;\n}\n\n.nav-menu a {\n    color: #e0e0e0;\n    text-decoration: none;\n    font-weight: 500;\n    transition: color 0.3s;\n    position: relative;\n    padding: 0.5rem 0;\n}\n\n.nav-menu a:hover,\n.nav-menu a.active {\n    color: #dc2626;\n}\n\n.nav-menu a.active::after {\n    content: '';\n    position: absolute;\n    bottom: -5px;\n    left: 0;\n    width: 100%;\n    height: 2px;\n    background: #dc2626;\n}\n\n.auth-buttons {\n    display: flex;\n    gap: 1rem;\n    flex-shrink: 0;\n    align-items: center;\n}\n\n.cart-icon {\n    position: relative;\n    background: #dc2626;\n    color: white;\n    border: none;\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: background 0.3s;\n}\n\n.cart-icon:hover {\n    background: #b91c1c;\n}\n\n.cart-count {\n    position: absolute;\n    top: -5px;\n    right: -5px;\n    background: #ef4444;\n    color: white;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    font-size: 0.8rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.mobile-menu-toggle {\n    display: none;\n    background: none;\n    border: none;\n    color: #e0e0e0;\n    font-size: 1.5rem;\n    cursor: pointer;\n}\n\n.mobile-nav {\n    display: none;\n    position: fixed;\n    top: 68px; /* Header height */\n    left: 0;\n    right: 0;\n    background: #2d2d2d;\n    padding: 1rem;\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);\n    z-index: 1001; /* Above header */\n}\n\n.mobile-nav.active {\n    display: block;\n}\n\n.mobile-nav-menu {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n.mobile-nav-menu a {\n    color: #e0e0e0;\n    text-decoration: none;\n    font-size: 0.9rem;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.2rem;\n}\n\n.mobile-nav-menu a:hover,\n.mobile-nav-menu a.active {\n    color: #dc2626;\n}\n\n.btn {\n    padding: 0.5rem 1.5rem;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    font-weight: 500;\n    transition: all 0.3s;\n    text-decoration: none;\n    display: inline-block;\n}\n\n.btn-outline {\n    background: transparent;\n    border: 2px solid #dc2626;\n    color: #dc2626;\n}\n\n.btn-outline:hover {\n    background: #dc2626;\n    color: white;\n}\n\n.btn-primary {\n    background: #dc2626;\n    color: white;\n}\n\n.btn-primary:hover {\n    background: #b91c1c;\n}\n\n.btn-secondary {\n    background: #404040;\n    color: white;\n}\n\n.btn-secondary:hover {\n    background: #505050;\n}\n\n/* Main Content */\n.main-content {\n    min-height: calc(100vh - 200px);\n    padding-bottom: 80px;\n}\n\n.page-section {\n    display: none;\n    padding: 2rem 0;\n}\n\n.page-section.active {\n    display: block;\n}\n\n.container {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 0 2rem;\n}\n\n/* Hero Section */\n.hero {\n    position: relative;\n    padding: 4rem 0;\n    text-align: center;\n    overflow: hidden;\n    min-height: 500px;\n    display: flex;\n    align-items: center;\n}\n\n.hero-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n}\n\n.hero-slide {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n    transition: opacity 1s ease-in-out;\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n}\n\n.hero-slide.active {\n    opacity: 1;\n}\n\n.hero-slide::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(26, 26, 26, 0.7);\n}\n\n.hero-slide:nth-child(1) {\n    background-image: url('https://images.unsplash.com/photo-1503376780353-7e6692767b70?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80');\n}\n\n.hero-slide:nth-child(2) {\n    background-image: url('https://images.unsplash.com/photo-1552519507-da3b142c6e3d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80');\n}\n\n.hero-slide:nth-child(3) {\n    background-image: url('https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80');\n}\n\n.hero-slide:nth-child(4) {\n    background-image: url('https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80');\n}\n\n.hero-slide:nth-child(5) {\n    background-image: url('https://images.unsplash.com/photo-1583121274602-3e2820c69888?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80');\n}\n\n.hero-container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 2rem;\n    position: relative;\n    z-index: 2;\n}\n\n.hero h1 {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n    color: #ffffff;\n}\n\n.hero p {\n    font-size: 1.2rem;\n    margin-bottom: 2rem;\n    color: #b0b0b0;\n}\n\n.hero-search-container {\n    max-width: 600px;\n    margin: 2rem auto;\n    position: relative;\n}\n\n.hero-search-input {\n    width: 100%;\n    padding: 1rem 1.5rem;\n    border: 2px solid rgba(255, 255, 255, 0.2);\n    border-radius: 50px;\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    color: white;\n    font-size: 1.1rem;\n    outline: none;\n    transition: all 0.3s ease;\n}\n\n.hero-search-btn {\n    position: absolute;\n    right: 8px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: linear-gradient(135deg, #dc2626, #b91c1c);\n    border: none;\n    border-radius: 40px;\n    padding: 0.8rem 1.5rem;\n    color: white;\n    cursor: pointer;\n    font-size: 1rem;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);\n}\n\n.hero-browse-btn {\n    font-size: 1.1rem;\n    padding: 1rem 2rem;\n    margin-top: 1rem;\n}\n\n/* AI Diagnosis Section */\n.ai-diagnosis-section {\n    background: linear-gradient(135deg, #2d2d2d, #1a1a1a);\n    padding: 4rem 0;\n    margin: 2rem 0;\n    position: relative;\n    overflow: hidden;\n}\n\n.ai-diagnosis-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grid\" width=\"10\" height=\"10\" patternUnits=\"userSpaceOnUse\"><path d=\"M 10 0 L 0 0 0 10\" fill=\"none\" stroke=\"%23404040\" stroke-width=\"0.5\" opacity=\"0.3\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grid)\"/></svg>');\n    opacity: 0.1;\n}\n\n.ai-diagnosis-container {\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    gap: 3rem;\n    align-items: start;\n    position: relative;\n    z-index: 1;\n}\n\n.ai-diagnosis-content {\n    background: rgba(26, 26, 26, 0.8);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 3rem;\n    border: 2px solid #404040;\n    transition: border-color 0.3s;\n}\n\n.ai-diagnosis-content:hover {\n    border-color: #dc2626;\n}\n\n.ai-icon {\n    font-size: 4rem;\n    text-align: center;\n    margin-bottom: 1rem;\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n\n    0%,\n    100% {\n        transform: scale(1);\n    }\n\n    50% {\n        transform: scale(1.1);\n    }\n}\n\n.celebration {\n    animation: celebrate 1s ease-out;\n}\n\n@keyframes celebrate {\n    0% {\n        transform: scale(1) rotate(0deg);\n    }\n\n    25% {\n        transform: scale(1.2) rotate(-5deg);\n    }\n\n    50% {\n        transform: scale(1.3) rotate(5deg);\n    }\n\n    75% {\n        transform: scale(1.1) rotate(-2deg);\n    }\n\n    100% {\n        transform: scale(1) rotate(0deg);\n    }\n}\n\n.ai-diagnosis-content h2 {\n    font-size: 2.5rem;\n    color: #ffffff;\n    text-align: center;\n    margin-bottom: 1rem;\n    background: linear-gradient(135deg, #dc2626, #ef4444);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.ai-diagnosis-content>p {\n    text-align: center;\n    color: #b0b0b0;\n    font-size: 1.1rem;\n    margin-bottom: 2rem;\n}\n\n.diagnosis-form {\n    margin-bottom: 2rem;\n}\n\n.car-details {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 1rem;\n    margin: 1rem 0;\n}\n\n.ai-diagnose-btn {\n    width: 100%;\n    font-size: 1.2rem;\n    padding: 1rem 2rem;\n    background: linear-gradient(135deg, #dc2626, #b91c1c);\n    border: none;\n    border-radius: 10px;\n    color: white;\n    cursor: pointer;\n    transition: all 0.3s;\n    box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);\n}\n\n.ai-diagnose-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(220, 38, 38, 0.4);\n}\n\n.diagnosis-results {\n    margin-top: 2rem;\n    animation: slideIn 0.5s ease-out;\n}\n\n@keyframes slideIn {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.diagnosis-results h3 {\n    color: #dc2626;\n    margin-bottom: 1rem;\n    font-size: 1.5rem;\n}\n\n.diagnosis-card {\n    background: #2d2d2d;\n    border-radius: 15px;\n    padding: 2rem;\n    border: 2px solid #404040;\n}\n\n.diagnosis-problem {\n    margin-bottom: 1.5rem;\n}\n\n.diagnosis-problem h4 {\n    color: #ffffff;\n    margin-bottom: 0.5rem;\n}\n\n.diagnosis-problem p {\n    color: #b0b0b0;\n    font-size: 1.1rem;\n}\n\n.recommended-parts h4 {\n    color: #ffffff;\n    margin-bottom: 1rem;\n}\n\n.parts-list {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n    margin-bottom: 1.5rem;\n}\n\n.part-item {\n    background: #1a1a1a;\n    padding: 1rem;\n    border-radius: 8px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid #404040;\n    transition: border-color 0.3s;\n}\n\n.part-item:hover {\n    border-color: #dc2626;\n}\n\n.part-name {\n    color: #e0e0e0;\n    font-weight: 500;\n}\n\n.part-price {\n    color: #dc2626;\n    font-weight: bold;\n}\n\n.diagnosis-confidence {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.confidence-label {\n    color: #b0b0b0;\n    font-weight: 500;\n}\n\n.confidence-bar {\n    flex: 1;\n    height: 8px;\n    background: #404040;\n    border-radius: 4px;\n    overflow: hidden;\n}\n\n.confidence-fill {\n    height: 100%;\n    background: linear-gradient(90deg, #dc2626, #ef4444);\n    border-radius: 4px;\n    transition: width 0.5s ease;\n}\n\n.confidence-percentage {\n    color: #dc2626;\n    font-weight: bold;\n}\n\n.ai-features {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n}\n\n.feature-item {\n    background: rgba(26, 26, 26, 0.8);\n    backdrop-filter: blur(10px);\n    border-radius: 15px;\n    padding: 2rem;\n    text-align: center;\n    border: 2px solid #404040;\n    transition: all 0.3s;\n}\n\n.feature-item:hover {\n    transform: translateY(-5px);\n    border-color: #dc2626;\n    box-shadow: 0 10px 30px rgba(220, 38, 38, 0.2);\n}\n\n.feature-icon {\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n}\n\n.feature-item h4 {\n    color: #ffffff;\n    margin-bottom: 0.5rem;\n    font-size: 1.2rem;\n}\n\n.feature-item p {\n    color: #b0b0b0;\n    font-size: 0.9rem;\n}\n\n/* Features Section */\n.features-section {\n    padding: 4rem 0;\n}\n\n.features-grid {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 2rem;\n    margin-top: 2rem;\n}\n\n.feature-card {\n    background: #2d2d2d;\n    padding: 2rem;\n    border-radius: 10px;\n    text-align: center;\n    border: 2px solid #404040;\n    transition: transform 0.3s, border-color 0.3s;\n}\n\n.feature-card:hover {\n    transform: translateY(-5px);\n    border-color: #dc2626;\n}\n\n.feature-icon {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n}\n\n.feature-title {\n    font-size: 1.3rem;\n    font-weight: bold;\n    margin-bottom: 1rem;\n    color: #ffffff;\n}\n\n.feature-description {\n    color: #b0b0b0;\n}\n\n/* Filters */\n.filters-section {\n    background: #2d2d2d;\n    padding: 2rem 0;\n    border-bottom: 2px solid #404040;\n}\n\n.filters-container {\n    display: flex;\n    gap: 1rem;\n    flex-wrap: wrap;\n    align-items: center;\n}\n\n.filter-group {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n.filter-group label {\n    font-size: 0.9rem;\n    color: #b0b0b0;\n}\n\n.filter-group select,\n.filter-group input {\n    padding: 0.5rem;\n    border: 2px solid #404040;\n    border-radius: 5px;\n    background: #1a1a1a;\n    color: #e0e0e0;\n    font-size: 0.9rem;\n}\n\n.filter-group select:focus,\n.filter-group input:focus {\n    outline: none;\n    border-color: #dc2626;\n}\n\n.sort-options {\n    margin-left: auto;\n}\n\n/* Listings Grid */\n.listings-grid {\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    gap: 1.5rem;\n    margin: 2rem 0;\n}\n\n.listing-card {\n    background: #2d2d2d;\n    border-radius: 10px;\n    overflow: hidden;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\n    transition: transform 0.3s, box-shadow 0.3s;\n    border: 2px solid #404040;\n    cursor: pointer;\n}\n\n.listing-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 25px rgba(220, 38, 38, 0.2);\n    border-color: #dc2626;\n}\n\n.listing-image {\n    height: 200px;\n    background: linear-gradient(45deg, #404040, #2d2d2d);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 3rem;\n    color: #dc2626;\n    position: relative;\n}\n\n.listing-views {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background: rgba(0, 0, 0, 0.7);\n    color: white;\n    padding: 0.2rem 0.5rem;\n    border-radius: 15px;\n    font-size: 0.8rem;\n}\n\n.listing-info {\n    padding: 1rem;\n}\n\n.listing-title {\n    font-size: 1.1rem;\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n    color: #ffffff;\n}\n\n.listing-price {\n    font-size: 1.3rem;\n    font-weight: bold;\n    color: #dc2626;\n    margin-bottom: 0.5rem;\n}\n\n.listing-location {\n    color: #888;\n    font-size: 0.9rem;\n    display: flex;\n    align-items: center;\n    gap: 0.3rem;\n}\n\n/* Detail Page */\n.detail-page {\n    display: grid;\n    grid-template-columns: 1fr 400px;\n    gap: 2rem;\n    margin: 2rem 0;\n}\n\n.image-gallery {\n    background: #2d2d2d;\n    border-radius: 10px;\n    overflow: hidden;\n    position: relative;\n}\n\n.main-image {\n    width: 100%;\n    height: 400px;\n    background: linear-gradient(45deg, #404040, #2d2d2d);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 4rem;\n    color: #dc2626;\n    cursor: zoom-in;\n}\n\n.thumbnail-strip {\n    display: flex;\n    gap: 0.5rem;\n    padding: 1rem;\n    background: #1a1a1a;\n}\n\n.thumbnail {\n    width: 60px;\n    height: 60px;\n    background: #404040;\n    border-radius: 5px;\n    cursor: pointer;\n    border: 2px solid transparent;\n    transition: border-color 0.3s;\n}\n\n.thumbnail.active {\n    border-color: #dc2626;\n}\n\n.detail-info {\n    background: #2d2d2d;\n    border-radius: 10px;\n    padding: 2rem;\n    height: fit-content;\n}\n\n.detail-title {\n    font-size: 1.5rem;\n    font-weight: bold;\n    margin-bottom: 1rem;\n    color: #ffffff;\n}\n\n.detail-price {\n    font-size: 2rem;\n    font-weight: bold;\n    color: #dc2626;\n    margin-bottom: 1.5rem;\n}\n\n.detail-specs {\n    margin-bottom: 2rem;\n}\n\n.spec-row {\n    display: flex;\n    justify-content: space-between;\n    padding: 0.5rem 0;\n    border-bottom: 1px solid #404040;\n}\n\n.contact-form {\n    margin-top: 2rem;\n}\n\n.contact-buttons {\n    display: flex;\n    gap: 1rem;\n    margin-bottom: 1rem;\n}\n\n.whatsapp-btn {\n    background: #25d366;\n    color: white;\n    flex: 1;\n}\n\n.call-btn {\n    background: #007bff;\n    color: white;\n    flex: 1;\n}\n\n.share-buttons {\n    display: flex;\n    gap: 0.5rem;\n    margin-top: 1rem;\n}\n\n.share-btn {\n    background: #404040;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    padding: 0.5rem;\n    cursor: pointer;\n    transition: background 0.3s;\n}\n\n.share-btn:hover {\n    background: #dc2626;\n}\n\n.sticky-price-bar {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: #2d2d2d;\n    padding: 1rem;\n    box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);\n    display: none;\n    z-index: 999;\n}\n\n.sticky-price-content {\n    max-width: 1400px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n/* Profile Page */\n.profile-container {\n    display: grid;\n    grid-template-columns: 300px 1fr;\n    gap: 2rem;\n    margin: 2rem 0;\n}\n\n.profile-sidebar {\n    background: #2d2d2d;\n    border-radius: 10px;\n    padding: 2rem;\n    height: fit-content;\n}\n\n.profile-avatar {\n    width: 100px;\n    height: 100px;\n    background: #dc2626;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 2rem;\n    color: white;\n    margin: 0 auto 1rem;\n}\n\n.profile-menu {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.profile-menu li {\n    margin-bottom: 0.5rem;\n}\n\n.profile-menu a {\n    color: #e0e0e0;\n    text-decoration: none;\n    padding: 0.8rem 1rem;\n    display: block;\n    border-radius: 5px;\n    transition: background 0.3s;\n}\n\n.profile-menu a:hover,\n.profile-menu a.active {\n    background: #dc2626;\n    color: white;\n}\n\n.profile-content {\n    background: #2d2d2d;\n    border-radius: 10px;\n    padding: 2rem;\n}\n\n.listings-table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 1rem;\n}\n\n.listings-table th,\n.listings-table td {\n    padding: 1rem;\n    text-align: left;\n    border-bottom: 1px solid #404040;\n}\n\n.listings-table th {\n    background: #1a1a1a;\n    color: #dc2626;\n    font-weight: bold;\n}\n\n.action-buttons {\n    display: flex;\n    gap: 0.5rem;\n}\n\n.btn-small {\n    padding: 0.3rem 0.8rem;\n    font-size: 0.8rem;\n}\n\n.btn-danger {\n    background: #ef4444;\n    color: white;\n}\n\n.btn-danger:hover {\n    background: #dc2626;\n}\n\n/* Cart */\n.cart-container {\n    max-width: 800px;\n    margin: 2rem auto;\n}\n\n.cart-item {\n    background: #2d2d2d;\n    border-radius: 10px;\n    padding: 1.5rem;\n    margin-bottom: 1rem;\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n}\n\n.cart-item-image {\n    width: 80px;\n    height: 80px;\n    background: #404040;\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #dc2626;\n    font-size: 1.5rem;\n}\n\n.cart-item-info {\n    flex: 1;\n}\n\n.cart-item-title {\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n}\n\n.cart-item-price {\n    color: #dc2626;\n    font-weight: bold;\n}\n\n.cart-summary {\n    background: #2d2d2d;\n    border-radius: 10px;\n    padding: 2rem;\n    margin-top: 2rem;\n}\n\n.summary-row {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 1rem;\n}\n\n.summary-total {\n    font-size: 1.3rem;\n    font-weight: bold;\n    color: #dc2626;\n    border-top: 2px solid #404040;\n    padding-top: 1rem;\n}\n\n/* Sell Form */\n.sell-form {\n    max-width: 600px;\n    margin: 2rem auto;\n    background: #2d2d2d;\n    border-radius: 10px;\n    padding: 2rem;\n}\n\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    color: #e0e0e0;\n    font-weight: 500;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n    width: 100%;\n    padding: 0.8rem;\n    border: 2px solid #404040;\n    border-radius: 5px;\n    background: #1a1a1a;\n    color: #e0e0e0;\n    font-size: 1rem;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n    outline: none;\n    border-color: #dc2626;\n}\n\n.image-upload {\n    border: 2px dashed #404040;\n    border-radius: 10px;\n    padding: 2rem;\n    text-align: center;\n    cursor: pointer;\n    transition: border-color 0.3s;\n}\n\n.image-upload:hover {\n    border-color: #dc2626;\n}\n\n.image-upload input {\n    display: none;\n}\n\n/* Services Section */\n.services-section {\n    background: #2d2d2d;\n    padding: 4rem 0;\n    margin: 2rem 0;\n}\n\n.services-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 2rem;\n    margin-top: 2rem;\n}\n\n.service-card {\n    background: #1a1a1a;\n    padding: 2rem;\n    border-radius: 10px;\n    border: 2px solid #404040;\n    transition: transform 0.3s, border-color 0.3s;\n}\n\n.service-card:hover {\n    transform: translateY(-5px);\n    border-color: #dc2626;\n}\n\n.service-icon {\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n    color: #dc2626;\n}\n\n.service-title {\n    font-size: 1.2rem;\n    font-weight: bold;\n    margin-bottom: 1rem;\n    color: #ffffff;\n}\n\n.service-description {\n    color: #b0b0b0;\n    margin-bottom: 1rem;\n}\n\n.service-features {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.service-features li {\n    padding: 0.3rem 0;\n    color: #e0e0e0;\n}\n\n.service-features li::before {\n    content: '✓';\n    color: #dc2626;\n    font-weight: bold;\n    margin-right: 0.5rem;\n}\n\n/* Testimonials */\n.testimonials-section {\n    padding: 4rem 0;\n}\n\n.testimonials-grid {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 2rem;\n    margin-top: 2rem;\n}\n\n.testimonial-card {\n    background: #2d2d2d;\n    padding: 2rem;\n    border-radius: 10px;\n    border: 2px solid #404040;\n    text-align: center;\n}\n\n.testimonial-text {\n    font-style: italic;\n    margin-bottom: 1.5rem;\n    color: #b0b0b0;\n}\n\n.testimonial-author {\n    font-weight: bold;\n    color: #dc2626;\n}\n\n.testimonial-role {\n    font-size: 0.9rem;\n    color: #888;\n}\n\n/* Load More */\n.load-more {\n    text-align: center;\n    margin: 2rem 0;\n}\n\n.load-more-btn {\n    background: #404040;\n    color: white;\n    border: none;\n    padding: 1rem 2rem;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: background 0.3s;\n}\n\n.load-more-btn:hover {\n    background: #dc2626;\n}\n\n/* Footer */\n.footer {\n    background: #1a1a1a;\n    padding: 3rem 0 1rem;\n    margin-top: 4rem;\n    border-top: 2px solid #404040;\n}\n\n.footer-content {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 2rem;\n    margin-bottom: 2rem;\n}\n\n.footer-section h3 {\n    color: #dc2626;\n    margin-bottom: 1rem;\n}\n\n.footer-section ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.footer-section ul li {\n    margin-bottom: 0.5rem;\n}\n\n.footer-section ul li a {\n    color: #b0b0b0;\n    text-decoration: none;\n    transition: color 0.3s;\n}\n\n.footer-section ul li a:hover {\n    color: #dc2626;\n}\n\n.footer-bottom {\n    text-align: center;\n    padding-top: 2rem;\n    border-top: 1px solid #404040;\n    color: #888;\n}\n\n.user-greeting {\n    color: #e0e0e0;\n    margin-right: 1rem;\n}\n\n/* Auth Modal */\n.modal {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.8);\n    z-index: 2000;\n    backdrop-filter: blur(5px);\n}\n\n.modal.active {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.modal-content {\n    background: #2d2d2d;\n    border-radius: 15px;\n    padding: 2rem;\n    max-width: 400px;\n    width: 90%;\n    position: relative;\n    border: 2px solid #404040;\n}\n\n.modal-close {\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    background: none;\n    border: none;\n    color: #e0e0e0;\n    font-size: 1.5rem;\n    cursor: pointer;\n    transition: color 0.3s;\n}\n\n.modal-close:hover {\n    color: #dc2626;\n}\n\n.modal h2 {\n    color: #ffffff;\n    margin-bottom: 1.5rem;\n    text-align: center;\n}\n\n.modal .form-group {\n    margin-bottom: 1rem;\n}\n\n.modal .form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    color: #e0e0e0;\n}\n\n.modal .form-group input {\n    width: 100%;\n    padding: 0.8rem;\n    border: 2px solid #404040;\n    border-radius: 5px;\n    background: #1a1a1a;\n    color: #e0e0e0;\n    font-size: 1rem;\n}\n\n.modal .form-group input:focus {\n    outline: none;\n    border-color: #dc2626;\n}\n\n.modal-footer {\n    text-align: center;\n    margin-top: 1.5rem;\n}\n\n.modal-footer p {\n    color: #b0b0b0;\n    margin-top: 1rem;\n}\n\n.modal-footer a {\n    color: #dc2626;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-footer a:hover {\n    text-decoration: underline;\n}\n\n/* Chatbot Styles */\n.chatbot-container {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    z-index: 2000;\n}\n\n.chatbot-toggle {\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n    background: linear-gradient(135deg, #dc2626, #b91c1c);\n    border: none;\n    color: white;\n    font-size: 1.5rem;\n    cursor: pointer;\n    box-shadow: 0 4px 20px rgba(220, 38, 38, 0.4);\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.chatbot-toggle:hover {\n    transform: scale(1.1);\n    box-shadow: 0 6px 25px rgba(220, 38, 38, 0.6);\n}\n\n.chatbot-toggle.active {\n    background: #404040;\n}\n\n.chatbot-window {\n    position: absolute;\n    bottom: 80px;\n    right: 0;\n    width: 350px;\n    height: 500px;\n    background: #2d2d2d;\n    border-radius: 15px;\n    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);\n    border: 2px solid #404040;\n    display: none;\n    flex-direction: column;\n    overflow: hidden;\n}\n\n.chatbot-window.active {\n    display: flex;\n}\n\n.chatbot-header {\n    background: linear-gradient(135deg, #dc2626, #b91c1c);\n    color: white;\n    padding: 1rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.chatbot-header h4 {\n    margin: 0;\n    flex: 1;\n}\n\n.chatbot-close {\n    background: none;\n    border: none;\n    color: white;\n    font-size: 1.2rem;\n    cursor: pointer;\n    padding: 0.2rem;\n    border-radius: 3px;\n    transition: background 0.3s;\n}\n\n.chatbot-close:hover {\n    background: rgba(255, 255, 255, 0.2);\n}\n\n.chatbot-messages {\n    flex: 1;\n    padding: 1rem;\n    overflow-y: auto;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.chatbot-message {\n    max-width: 80%;\n    padding: 0.8rem 1rem;\n    border-radius: 15px;\n    word-wrap: break-word;\n}\n\n.chatbot-message.bot {\n    background: #404040;\n    color: #e0e0e0;\n    align-self: flex-start;\n    border-bottom-left-radius: 5px;\n}\n\n.chatbot-message.user {\n    background: #dc2626;\n    color: white;\n    align-self: flex-end;\n    border-bottom-right-radius: 5px;\n}\n\n.chatbot-typing {\n    display: none;\n    align-self: flex-start;\n    background: #404040;\n    color: #e0e0e0;\n    padding: 0.8rem 1rem;\n    border-radius: 15px;\n    border-bottom-left-radius: 5px;\n}\n\n.chatbot-typing.active {\n    display: block;\n}\n\n.typing-dots {\n    display: inline-flex;\n    gap: 0.2rem;\n}\n\n.typing-dot {\n    width: 6px;\n    height: 6px;\n    border-radius: 50%;\n    background: #b0b0b0;\n    animation: typing 1.4s infinite;\n}\n\n.typing-dot:nth-child(2) {\n    animation-delay: 0.2s;\n}\n\n.typing-dot:nth-child(3) {\n    animation-delay: 0.4s;\n}\n\n@keyframes typing {\n\n    0%,\n    60%,\n    100% {\n        transform: translateY(0);\n        opacity: 0.4;\n    }\n\n    30% {\n        transform: translateY(-10px);\n        opacity: 1;\n    }\n}\n\n.chatbot-input-container {\n    padding: 1rem;\n    border-top: 1px solid #404040;\n    display: flex;\n    gap: 0.5rem;\n}\n\n.chatbot-input {\n    flex: 1;\n    padding: 0.8rem;\n    border: 2px solid #404040;\n    border-radius: 20px;\n    background: #1a1a1a;\n    color: #e0e0e0;\n    outline: none;\n    font-size: 0.9rem;\n}\n\n.chatbot-input:focus {\n    border-color: #dc2626;\n}\n\n.chatbot-send {\n    background: #dc2626;\n    border: none;\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    color: white;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: background 0.3s;\n}\n\n.chatbot-send:hover {\n    background: #b91c1c;\n}\n\n.chatbot-send:disabled {\n    background: #666;\n    cursor: not-allowed;\n}\n\n.chatbot-suggestions {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n    margin-top: 0.5rem;\n}\n\n.chatbot-suggestion {\n    background: #1a1a1a;\n    border: 1px solid #404040;\n    color: #e0e0e0;\n    padding: 0.4rem 0.8rem;\n    border-radius: 15px;\n    font-size: 0.8rem;\n    cursor: pointer;\n    transition: all 0.3s;\n}\n\n.chatbot-suggestion:hover {\n    background: #dc2626;\n    border-color: #dc2626;\n    color: white;\n}\n\n/* Responsive */\n@media (max-width: 1200px) {\n    .listings-grid {\n        grid-template-columns: repeat(4, 1fr);\n    }\n\n    .ai-diagnosis-container {\n        grid-template-columns: 1fr;\n        gap: 2rem;\n    }\n}\n\n@media (max-width: 992px) {\n    .listings-grid {\n        grid-template-columns: repeat(3, 1fr);\n    }\n\n    .detail-page {\n        grid-template-columns: 1fr;\n    }\n\n    .profile-container {\n        grid-template-columns: 1fr;\n    }\n\n    .features-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .services-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .testimonials-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .footer-content {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media (max-width: 768px) {\n    .nav-menu {\n        display: none;\n    }\n\n    .mobile-menu-toggle {\n        display: block;\n    }\n\n    .mobile-nav {\n        display: block;\n    }\n\n    .main-content {\n        padding-bottom: 120px;\n    }\n\n    .listings-grid {\n        grid-template-columns: repeat(2, 1fr);\n        gap: 1rem;\n    }\n\n    .filters-container {\n        flex-direction: column;\n        align-items: stretch;\n    }\n\n    .sort-options {\n        margin-left: 0;\n    }\n\n    .hero h1 {\n        font-size: 2rem;\n    }\n\n    .detail-page {\n        grid-template-columns: 1fr;\n    }\n\n    .profile-container {\n        grid-template-columns: 1fr;\n    }\n\n    .cart-item {\n        flex-direction: column;\n        text-align: center;\n    }\n\n    .footer-content {\n        grid-template-columns: 1fr;\n        text-align: center;\n    }\n\n    .ai-diagnosis-content {\n        padding: 2rem;\n    }\n\n    .ai-diagnosis-content h2 {\n        font-size: 2rem;\n    }\n\n    .car-details {\n        grid-template-columns: 1fr;\n    }\n\n    .ai-features {\n        gap: 1rem;\n    }\n\n    .feature-item {\n        padding: 1.5rem;\n    }\n\n    .hero-search-container {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n    }\n\n    .hero-search-input {\n        font-size: 1rem;\n    }\n\n    .hero-search-btn {\n        position: static;\n        transform: none;\n        width: 100%;\n    }\n\n    .hero-browse-btn {\n        width: 100%;\n    }\n}\n\n@media (max-width: 480px) {\n    .listings-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .nav-container {\n        padding: 0 1rem;\n    }\n\n    .container {\n        padding: 0 1rem;\n    }\n\n    .chatbot-window {\n        width: calc(100vw - 40px);\n        height: calc(100vh - 140px);\n        bottom: 80px;\n        right: 20px;\n        left: 20px;\n    }\n\n    .contact-us .container>div {\n        grid-template-columns: 1fr !important;\n    }\n}\n\n/* Vendors Grid */\n.vendors-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 2rem;\n}\n\n.vendor-card {\n    background: #2d2d2d;\n    border-radius: 10px;\n    padding: 2rem;\n    text-align: center;\n    border: 2px solid #404040;\n    transition: transform 0.3s, border-color 0.3s;\n}\n\n.vendor-card:hover {\n    transform: translateY(-5px);\n    border-color: #dc2626;\n}\n\n.vendor-avatar {\n    width: 100px;\n    height: 100px;\n    background: #dc2626;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 2rem;\n    color: white;\n    margin: 0 auto 1rem;\n}\n\n.vendor-name {\n    font-size: 1.3rem;\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n    color: #ffffff;\n}\n\n.vendor-location {\n    color: #888;\n    font-size: 0.9rem;\n    margin-bottom: 1rem;\n}\n\n.vendor-products {\n    font-size: 0.9rem;\n    color: #b0b0b0;\n}\n","size_bytes":33176},"verify_listing.py":{"content":"\nimport asyncio\nfrom playwright.async_api import async_playwright\nimport time\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        page = await browser.new_page()\n\n        # Listen for all console events and print them\n        page.on(\"console\", lambda msg: print(f\"Browser Console: {msg.text}\"))\n\n        try:\n            # Navigate to the app\n            await page.goto(\"http://localhost:8000\")\n\n            # --- Sign up a new mechanic user ---\n            await page.click('text=Sign Up')\n            await page.wait_for_selector('#signup-modal.active')\n\n            # Generate unique user credentials to avoid conflicts\n            email = f\"mechanic_{int(time.time())}@test.com\"\n\n            await page.fill('#signup-name', 'Test Mechanic')\n            await page.fill('#signup-email', email)\n            await page.fill('#signup-phone', '1234567890')\n            await page.fill('#signup-password', 'password123')\n            await page.select_option('#signup-role', 'mechanic')\n            await page.select_option('#signup-location', 'lagos')\n\n            # Add a small delay to ensure form values are processed\n            await page.wait_for_timeout(500)\n\n            # Use a dialog handler to accept the alert\n            page.on('dialog', lambda dialog: dialog.accept())\n\n            await page.click('#signup-modal button[type=\"submit\"]')\n\n            # Wait for signup to complete and UI to update\n            await page.wait_for_selector('#auth-buttons-user', timeout=10000)\n\n            # --- Create a new listing ---\n            await page.click('text=Profile')\n            await page.wait_for_selector('#profile.active')\n\n            await page.click('#create-listing-btn')\n            await page.wait_for_selector('#create-listing-page.active')\n\n            listing_name = \"Test Product - Brake Discs\"\n            await page.fill('#listing-name', listing_name)\n            await page.fill('#listing-description', 'A set of high-quality brake discs.')\n            await page.fill('#listing-price', '30000')\n\n            await page.click('#create-listing-page button[type=\"submit\"]')\n\n            # The page should redirect to the profile after creation\n            await page.wait_for_selector('#profile.active')\n\n            # --- Verify the listing appears on the listings page ---\n            await page.click('text=Parts')\n            await page.wait_for_selector('#listings.active')\n\n            # Wait for listings to be loaded from Firestore\n            await page.wait_for_timeout(3000) # Wait for Firestore to update\n\n            # Check if the listing is visible on the page\n            listing_visible = await page.is_visible(f'text={listing_name}')\n\n            if listing_visible:\n                print(\"Verification successful: New listing is visible on the page.\")\n            else:\n                print(\"Verification failed: New listing not found on the page.\")\n\n            # Take a screenshot for visual confirmation\n            await page.screenshot(path='new_listing_verification.png')\n            print(\"Screenshot saved as new_listing_verification.png\")\n\n        except Exception as e:\n            print(f\"An error occurred during verification: {e}\")\n            await page.screenshot(path='verification_error.png')\n            print(\"Error screenshot saved as verification_error.png\")\n\n        finally:\n            await browser.close()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n","size_bytes":3491},"jules-scratch/verification/verify_frontend.py":{"content":"\nimport asyncio\nfrom playwright.async_api import async_playwright\nimport http.server\nimport socketserver\nimport threading\n\n# --- Test Configuration ---\nPORT = 8007\nBASE_URL = f\"http://localhost:{PORT}\"\nSCREENSHOT_PATH = \"jules-scratch/verification/verification.png\"\nEXPECTED_PRODUCT_TITLE = \"Premium Brake Pads Set\"\n\nasync def run_verification():\n    \"\"\"Runs the Playwright script to generate a screenshot for visual verification.\"\"\"\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        page = await browser.new_page()\n\n        try:\n            print(f\"Navigating to {BASE_URL}\")\n            await page.goto(BASE_URL)\n\n            # Check if the chatbot is open and close it if necessary\n            if await page.is_visible('.chatbot-window.active'):\n                print(\"Closing the chatbot popup...\")\n                await page.click('.chatbot-toggle')\n                await page.wait_for_selector('.chatbot-window:not(.active)', timeout=2000)\n\n            print(\"Clicking 'Browse All Parts' to navigate to the listings page...\")\n            await page.click('.hero-browse-btn')\n\n            print(\"Forcing the application to load and display mock data...\")\n            await page.evaluate('loadListingsFromMock()')\n\n            print(\"Waiting for the listings page to render...\")\n            await page.wait_for_selector(f'#listings-grid .listing-card:has-text(\"{EXPECTED_PRODUCT_TITLE}\")', timeout=5000)\n\n            print(f\"Clicking on the test product: '{EXPECTED_PRODUCT_TITLE}'\")\n            await page.click(f'#listings-grid .listing-card:has-text(\"{EXPECTED_PRODUCT_TITLE}\")')\n\n            # Wait for the detail page to be visible\n            await page.wait_for_selector('#detail .detail-page', timeout=5000)\n\n            print(f\"Taking screenshot and saving to {SCREENSHOT_PATH}...\")\n            await page.screenshot(path=SCREENSHOT_PATH)\n\n        except Exception as e:\n            print(f\"An error occurred during the Playwright script: {e}\")\n            await page.screenshot(path=\"jules-scratch/verification/verification_error.png\")\n            return False\n        finally:\n            await browser.close()\n\n    print(\"Script finished successfully.\")\n    return True\n\n# --- Main Execution ---\nif __name__ == \"__main__\":\n    server = None\n    success = False\n    try:\n        # Define the handler and server within the main block\n        handler = http.server.SimpleHTTPRequestHandler\n        httpd = socketserver.TCPServer((\"\", PORT), handler)\n        print(f\"Serving at port {PORT}\")\n        thread = threading.Thread(target=httpd.serve_forever)\n        thread.daemon = True\n        thread.start()\n\n        success = asyncio.run(run_verification())\n\n    except KeyboardInterrupt:\n        print(\"Stopping server.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        success = False\n    finally:\n        # Ensure httpd is defined before trying to shut it down\n        if 'httpd' in locals() and httpd:\n            httpd.shutdown()\n\n    exit(0 if success else 1)\n","size_bytes":3058},"README.md":{"content":"# Mechanic Village - Premium Auto Parts Marketplace\n\nMechanic Village is a modern, responsive single-page application (SPA) designed as a marketplace for automotive parts and services. It is built with vanilla HTML, CSS, and JavaScript, and powered by Google Firebase for its backend services.\n\n## ✨ Features\n\n-   **User Authentication**: Secure signup and login for customers and mechanics using Firebase Authentication.\n-   **Dynamic Product Listings**: Browse, search, and filter a wide range of auto parts.\n-   **Mechanic Directory**: Find and view profiles of qualified mechanics, filterable by specialization, location, and experience.\n-   **AI-Powered Diagnosis**: An intelligent tool on the homepage to help users diagnose car problems and get part recommendations.\n-   **Real-time Inventory**: The application reflects inventory levels in real-time, leveraging Firestore for data storage.\n-   **Direct Purchase Flow**: A streamlined \"Buy Now\" feature for quick and easy transactions.\n-   **User Profiles**: Dedicated profile pages for users to manage their account information and view purchase history.\n-   **Responsive Design**: A clean UI that works seamlessly across desktops, tablets, and mobile devices.\n-   **Customer Support Chatbot**: An integrated chatbot to assist users with common questions.\n\n## 🛠️ Tech Stack\n\n-   **Frontend**: HTML5, CSS3, Vanilla JavaScript (ES6+)\n-   **Backend**: Google Firebase\n    -   **Firestore**: For database and real-time data synchronization.\n    -   **Firebase Authentication**: For user management.\n    -   **Firebase Hosting**: For deployment.\n\n## 🚀 Getting Started\n\n### Prerequisites\n\n-   A modern web browser that supports JavaScript.\n-   A local web server to run the project (due to browser security policies with `file://` URLs). Python's built-in HTTP server is a great option.\n\n### Running Locally\n\n1.  **Clone the repository:**\n    ```bash\n    git clone <repository-url>\n    cd <repository-directory>\n    ```\n\n2.  **Start a local web server:**\n    If you have Python 3 installed, you can run the following command from the project's root directory:\n    ```bash\n    python -m http.server\n    ```\n    This will start a server, typically on `http://localhost:8000`.\n\n3.  **Open the application:**\n    Open your web browser and navigate to `http://localhost:8000`. The application should now be running.\n\n## 🔧 Firebase Configuration\n\nThe Firebase project configuration is already included in the `script.js` file. The application is connected to a live Firebase project (`mechanic-db779`) and requires no additional setup for the frontend to function.\n\n```javascript\n// Firebase configuration in script.js\nconst firebaseConfig = {\n  apiKey: \"YOUR_API_KEY\",\n  authDomain: \"YOUR_AUTH_DOMAIN\",\n  projectId: \"YOUR_PROJECT_ID\",\n  // ... and other keys\n};\n```\n\n## ☁️ Deployment\n\nThis project is configured for deployment with **Firebase Hosting**.\n\n1.  **Install the Firebase CLI:**\n    If you don't have it installed, follow the official instructions to install the [Firebase Command Line Interface](https://firebase.google.com/docs/cli).\n\n2.  **Login to Firebase:**\n    ```bash\n    firebase login\n    ```\n\n3.  **Deploy the site:**\n    Run the following command from the project's root directory:\n    ```bash\n    firebase deploy --only hosting\n    ```\n    After the command completes, the Firebase CLI will provide you with the URL for your live site.\n\n## 📄 License\n\nThis project is licensed under the MIT License.","size_bytes":3488},"script.js":{"content":"// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBftANZjTsEOoGmHaDwJb9JwXhHQK8j6KY\",\n  authDomain: \"mechanic-db779.firebaseapp.com\",\n  projectId: \"mechanic-db779\",\n  storageBucket: \"mechanic-db779.firebasestorage.app\",\n  messagingSenderId: \"98926639697\",\n  appId: \"1:98926639697:web:1b1a380fccfb411871d670\",\n  measurementId: \"G-C1REMEN7SD\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst db = firebase.firestore();\n\n// Authentication state\nlet isLoggedIn = false;\nlet currentUser = null;\n\n// Check auth state\nauth.onAuthStateChanged(async (user) => {\n  if (user) {\n    // User is signed in.\n    isLoggedIn = true;\n    const userProfile = await db.collection('users').doc(user.uid).get();\n    if (userProfile.exists) {\n        currentUser = {\n            uid: user.uid,\n            email: user.email,\n            ...userProfile.data()\n        };\n    } else {\n        // Fallback for new users before Firestore write completes\n        currentUser = {\n            uid: user.uid,\n            email: user.email,\n            name: user.displayName || user.email.split('@')[0] || 'User'\n        };\n    }\n  } else {\n    // User is signed out.\n    isLoggedIn = false;\n    currentUser = null;\n  }\n  updateAuthUI();\n});\n\n// Sample listings data\nconst listings = [\n    { id: 1, title: 'Premium Brake Pads Set', price: 25000, location: 'Lagos', views: 156, image: '🔧', brand: 'bosch' },\n    { id: 2, title: 'Engine Oil Filter', price: 8500, location: 'Abuja', views: 89, image: '🛢️', brand: 'mann' },\n    { id: 3, title: 'Spark Plugs Set', price: 15000, location: 'Lagos', views: 203, image: '⚡', brand: 'ngk' },\n    { id: 4, title: 'Car Battery', price: 45000, location: 'Kano', views: 124, image: '🔋', brand: 'exide' },\n    { id: 5, title: 'Tire Set (4pcs)', price: 120000, location: 'Ibadan', views: 78, image: '🛞', brand: 'michelin' },\n    { id: 6, title: 'Radiator', price: 35000, location: 'Lagos', views: 92, image: '🌡️', brand: 'denso' },\n    { id: 7, title: 'Air Filter', price: 8000, location: 'Abuja', views: 67, image: '🌪️', brand: 'bosch' },\n    { id: 8, title: 'Alternator', price: 55000, location: 'Lagos', views: 134, image: '⚡', brand: 'bosch' },\n    { id: 9, title: 'Shock Absorbers', price: 28000, location: 'Kano', views: 98, image: '🏎️', brand: 'monroe' },\n    { id: 10, title: 'Fuel Pump', price: 32000, location: 'Ibadan', views: 112, image: '⛽', brand: 'bosch' }\n];\n\n// Sample mechanics data\nconst mechanics = [\n    { id: 1, name: 'Ahmed Ibrahim', specialization: 'engine', location: 'Lagos', experience: '12 Years', rating: 4.9, reviews: 127, price: 5000, image: '👨‍🔧', services: ['Engine Repair', 'Oil Change', 'Diagnostics', 'Tune-up'] },\n    { id: 2, name: 'John Okafor', specialization: 'brake', location: 'Abuja', experience: '8 Years', rating: 4.8, reviews: 89, price: 4500, image: '🔧', services: ['Brake Repair', 'Brake Pads', 'Brake Fluid', 'ABS System'] },\n    { id: 3, name: 'Sarah Adebayo', specialization: 'electrical', location: 'Lagos', experience: '15 Years', rating: 4.9, reviews: 203, price: 6000, image: '⚡', services: ['Electrical Repair', 'Wiring', 'Battery', 'Alternator'] },\n    { id: 4, name: 'Michael Eze', specialization: 'transmission', location: 'Kano', experience: '10 Years', rating: 4.7, reviews: 124, price: 5500, image: '⚙️', services: ['Transmission Repair', 'Clutch', 'Gearbox', 'Fluid Change'] },\n    { id: 5, name: 'Grace Okonkwo', specialization: 'ac', location: 'Ibadan', experience: '6 Years', rating: 4.6, reviews: 78, price: 4000, image: '❄️', services: ['AC Repair', 'Refrigerant', 'Compressor', 'Cooling System'] },\n    { id: 6, name: 'David Adamu', specialization: 'general', location: 'Lagos', experience: '20 Years', rating: 4.8, reviews: 156, price: 4500, image: '🔧', services: ['General Repair', 'Maintenance', 'Inspection', 'Tune-up'] },\n    { id: 7, name: 'Fatima Yusuf', specialization: 'engine', location: 'Abuja', experience: '9 Years', rating: 4.7, reviews: 92, price: 5200, image: '🛠️', services: ['Engine Diagnostics', 'Repair', 'Overhaul', 'Performance'] },\n    { id: 8, name: 'Peter Okwu', specialization: 'brake', location: 'Lagos', experience: '11 Years', rating: 4.9, reviews: 134, price: 4800, image: '🚗', services: ['Brake System', 'Safety Check', 'Disc Replacement', 'Hydraulics'] },\n    { id: 9, name: 'Aisha Mohammed', specialization: 'electrical', location: 'Kano', experience: '7 Years', rating: 4.5, reviews: 98, price: 4200, image: '🔌', services: ['Auto Electrical', 'Lighting', 'Sensors', 'ECU'] },\n    { id: 10, name: 'Emmanuel Obi', specialization: 'general', location: 'Ibadan', experience: '14 Years', rating: 4.8, reviews: 112, price: 4700, image: '👨‍🔧', services: ['Full Service', 'Maintenance', 'Repairs', 'Diagnostics'] }\n];\n\nlet currentPage = 1;\nlet filteredListings = [...listings];\nlet currentMechanicPage = 1;\nlet filteredMechanics = [...mechanics];\n\n// Navigation\nfunction showPage(pageId, options = {}) {\n    // Hide all pages\n    document.querySelectorAll('.page-section').forEach(section => {\n        section.classList.remove('active');\n    });\n\n    // Show selected page\n    document.getElementById(pageId).classList.add('active');\n\n    // Update nav links\n    document.querySelectorAll('.nav-link, .mobile-nav-link').forEach(link => {\n        link.classList.remove('active');\n    });\n\n    document.querySelectorAll(`[onclick=\"showPage('${pageId}')\"]`).forEach(link => {\n        link.classList.add('active');\n    });\n\n    // Load listings if showing listings page\n    if (pageId === 'listings' && !options.skipLoad) {\n        loadListings();\n    }\n\n    // Load mechanics if showing mechanics page\n    if (pageId === 'mechanics') {\n        loadMechanics();\n    }\n\n    // Load vendors if showing vendors page\n    if (pageId === 'vendors') {\n        loadVendors();\n    }\n\n    // Handle sticky nav\n    if (pageId === 'detail') {\n        window.addEventListener('scroll', handleStickyPrice);\n    } else {\n        window.removeEventListener('scroll', handleStickyPrice);\n        document.getElementById('sticky-price-bar').style.display = 'none';\n    }\n}\n\n// Load listings from Firestore\nasync function loadListings() {\n    try {\n        const inventorySnapshot = await db.collection('inventory').orderBy('createdAt', 'desc').get();\n        listings.length = 0; // Clear existing mock data\n        inventorySnapshot.forEach(doc => {\n            const item = doc.data();\n            listings.push({\n                id: doc.id,\n                title: item.name,\n                price: item.price,\n                location: item.location,\n                views: item.views,\n                image: item.image || '📦',\n                description: item.description\n            });\n        });\n\n        filteredListings = [...listings];\n        displayListings();\n    } catch (error) {\n        console.error('Error loading listings:', error);\n        // We can keep the mock data as a fallback if Firestore fails\n        loadListingsFromMock();\n    }\n}\n\n// Fallback function for mock data\nfunction loadListingsFromMock() {\n    const mockData = [\n        { id: 1, title: 'Premium Brake Pads Set', price: 25000, location: 'Lagos', views: 156, image: '🔧', brand: 'bosch' },\n        { id: 2, title: 'Engine Oil Filter', price: 8500, location: 'Abuja', views: 89, image: '🛢️', brand: 'mann' },\n        { id: 3, title: 'Spark Plugs Set', price: 15000, location: 'Lagos', views: 203, image: '⚡', brand: 'ngk' },\n        { id: 4, title: 'Car Battery', price: 45000, location: 'Kano', views: 124, image: '🔋', brand: 'exide' },\n        { id: 5, title: 'Tire Set (4pcs)', price: 120000, location: 'Ibadan', views: 78, image: '🛞', brand: 'michelin' },\n        { id: 6, title: 'Radiator', price: 35000, location: 'Lagos', views: 92, image: '🌡️', brand: 'denso' },\n        { id: 7, title: 'Air Filter', price: 8000, location: 'Abuja', views: 67, image: '🌪️', brand: 'bosch' },\n        { id: 8, title: 'Alternator', price: 55000, location: 'Lagos', views: 134, image: '⚡', brand: 'bosch' },\n        { id: 9, title: 'Shock Absorbers', price: 28000, location: 'Kano', views: 98, image: '🏎️', brand: 'monroe' },\n        { id: 10, title: 'Fuel Pump', price: 32000, location: 'Ibadan', views: 112, image: '⛽', brand: 'bosch' }\n    ];\n\n    listings.length = 0;\n    listings.push(...mockData);\n    filteredListings = [...listings];\n    displayListings();\n}\n\n// Display listings in the grid\nfunction displayListings() {\n    const grid = document.getElementById('listings-grid');\n    if (!grid) return;\n\n    grid.innerHTML = '';\n\n    const itemsToShow = currentPage * 10;\n    const itemsToDisplay = filteredListings.slice(0, itemsToShow);\n\n    itemsToDisplay.forEach(listing => {\n        const card = createListingCard(listing);\n        grid.appendChild(card);\n    });\n}\n\nfunction createListingCard(listing) {\n    const card = document.createElement('div');\n    card.className = 'listing-card';\n    card.onclick = () => showListingDetail(listing);\n\n    card.innerHTML = `\n                <div class=\"listing-image\" loading=\"lazy\">\n                    ${listing.image}\n                    <div class=\"listing-views\">${listing.views} views</div>\n                </div>\n                <div class=\"listing-info\">\n                    <div class=\"listing-title\">${listing.title}</div>\n                    <div class=\"listing-price\">₦${listing.price.toLocaleString()}</div>\n                    <div class=\"listing-location\">📍 ${listing.location}</div>\n                </div>\n            `;\n\n    return card;\n}\n\nasync function showListingDetail(listing) {\n    document.getElementById('detail-title').textContent = listing.title;\n    document.getElementById('detail-price').textContent = `₦${listing.price.toLocaleString()}`;\n    document.getElementById('main-image').textContent = listing.image;\n    document.getElementById('sticky-title').textContent = listing.title;\n    document.getElementById('sticky-price').textContent = `₦${listing.price.toLocaleString()}`;\n\n    // Update inventory views\n    if (listing.id) {\n        try {\n            const productRef = db.collection('inventory').doc(String(listing.id));\n            await productRef.update({\n                views: firebase.firestore.FieldValue.increment(1)\n            });\n        } catch (error) {\n            console.error('Error updating views:', error);\n        }\n    }\n\n    showPage('detail');\n}\n\nfunction loadMoreListings() {\n    currentPage++;\n    loadListings();\n}\n\n// Load mechanics from Firestore\nasync function loadMechanics() {\n    try {\n        const mechanicsSnapshot = await db.collection('users').where('role', '==', 'mechanic').where('price_per_hour', '>', 0).get();\n        mechanics.length = 0; // Clear existing mock data\n        mechanicsSnapshot.forEach(doc => {\n            const mechanic = doc.data();\n            mechanics.push({\n                id: doc.id,\n                name: mechanic.name,\n                specialization: mechanic.specialization,\n                location: mechanic.location,\n                experience: mechanic.experience,\n                rating: mechanic.rating,\n                reviews: mechanic.reviews,\n                price: mechanic.price_per_hour,\n                image: mechanic.image || '👨‍🔧',\n                services: mechanic.services || []\n            });\n        });\n\n        filteredMechanics = [...mechanics];\n        displayMechanics();\n    } catch (error) {\n        console.error('Error loading mechanics:', error);\n    }\n}\n\n// The loadMechanicsFromMock function is no longer needed.\n\n// Display mechanics in the grid\nfunction displayMechanics() {\n    const grid = document.getElementById('mechanics-grid');\n    if (!grid) return;\n\n    grid.innerHTML = '';\n\n    const itemsToShow = currentMechanicPage * 10;\n    const itemsToDisplay = filteredMechanics.slice(0, itemsToShow);\n\n    itemsToDisplay.forEach(mechanic => {\n        const card = createMechanicCard(mechanic);\n        grid.appendChild(card);\n    });\n}\n\nfunction createMechanicCard(mechanic) {\n    const card = document.createElement('div');\n    card.className = 'listing-card';\n    card.onclick = () => showMechanicDetail(mechanic);\n\n    const stars = '⭐'.repeat(Math.floor(mechanic.rating));\n\n    card.innerHTML = `\n                <div class=\"listing-image\" loading=\"lazy\">\n                    ${mechanic.image}\n                    <div class=\"listing-views\">${mechanic.reviews} reviews</div>\n                </div>\n                <div class=\"listing-info\">\n                    <div class=\"listing-title\">${mechanic.name}</div>\n                    <div class=\"listing-price\">₦${mechanic.price.toLocaleString()}/hour</div>\n                    <div style=\"color: #fbbf24; font-size: 0.9rem; margin: 0.3rem 0;\">${stars} (${mechanic.rating})</div>\n                    <div style=\"color: #b0b0b0; font-size: 0.9rem; margin-bottom: 0.3rem;\">${mechanic.specialization.charAt(0).toUpperCase() + mechanic.specialization.slice(1)} • ${mechanic.experience}</div>\n                    <div class=\"listing-location\">📍 ${mechanic.location}</div>\n                </div>\n            `;\n\n    return card;\n}\n\nfunction showMechanicDetail(mechanic) {\n    document.getElementById('mechanic-detail-title').textContent = mechanic.name;\n    document.getElementById('mechanic-detail-price').textContent = `₦${mechanic.price.toLocaleString()}/hour`;\n\n    showPage('mechanic-detail');\n}\n\nfunction loadMoreMechanics() {\n    currentMechanicPage++;\n    loadMechanics();\n}\n\nfunction bookMechanic() {\n    if (!isLoggedIn) {\n        showLoginModal();\n        return;\n    }\n    alert('Booking request sent! The mechanic will contact you shortly to confirm the appointment.');\n}\n\n// Filters\ndocument.getElementById('brand-filter').addEventListener('change', applyFilters);\ndocument.getElementById('location-filter').addEventListener('change', applyFilters);\ndocument.getElementById('min-price').addEventListener('input', applyFilters);\ndocument.getElementById('max-price').addEventListener('input', applyFilters);\ndocument.getElementById('sort-by').addEventListener('change', applyFilters);\n\n// Mechanic filters\ndocument.getElementById('specialization-filter').addEventListener('change', applyMechanicFilters);\ndocument.getElementById('mechanic-location-filter').addEventListener('change', applyMechanicFilters);\ndocument.getElementById('experience-filter').addEventListener('change', applyMechanicFilters);\ndocument.getElementById('rating-filter').addEventListener('change', applyMechanicFilters);\ndocument.getElementById('mechanic-sort-by').addEventListener('change', applyMechanicFilters);\n\nfunction applyFilters() {\n    const brand = document.getElementById('brand-filter').value;\n    const location = document.getElementById('location-filter').value;\n    const minPrice = parseInt(document.getElementById('min-price').value) || 0;\n    const maxPrice = parseInt(document.getElementById('max-price').value) || Infinity;\n    const sortBy = document.getElementById('sort-by').value;\n\n    filteredListings = listings.filter(listing => {\n        return (!brand || listing.brand === brand) &&\n            (!location || listing.location.toLowerCase() === location) &&\n            (listing.price >= minPrice && listing.price <= maxPrice);\n    });\n\n    // Sort\n    switch (sortBy) {\n        case 'price-low':\n            filteredListings.sort((a, b) => a.price - b.price);\n            break;\n        case 'price-high':\n            filteredListings.sort((a, b) => b.price - a.price);\n            break;\n        case 'views':\n            filteredListings.sort((a, b) => b.views - a.views);\n            break;\n        default:\n            filteredListings.sort((a, b) => b.id - a.id);\n    }\n\n    currentPage = 1;\n    displayListings();\n}\n\nfunction applyMechanicFilters() {\n    const specialization = document.getElementById('specialization-filter').value;\n    const location = document.getElementById('mechanic-location-filter').value;\n    const experience = document.getElementById('experience-filter').value;\n    const rating = parseInt(document.getElementById('rating-filter').value) || 0;\n    const sortBy = document.getElementById('mechanic-sort-by').value;\n\n    filteredMechanics = mechanics.filter(mechanic => {\n        const experienceYears = parseInt(mechanic.experience);\n        let experienceMatch = true;\n\n        if (experience === '1-3') experienceMatch = experienceYears >= 1 && experienceYears <= 3;\n        else if (experience === '4-7') experienceMatch = experienceYears >= 4 && experienceYears <= 7;\n        else if (experience === '8-15') experienceMatch = experienceYears >= 8 && experienceYears <= 15;\n        else if (experience === '15+') experienceMatch = experienceYears >= 15;\n\n        return (!specialization || mechanic.specialization === specialization) &&\n            (!location || mechanic.location.toLowerCase() === location) &&\n            experienceMatch &&\n            (mechanic.rating >= rating);\n    });\n\n    // Sort mechanics\n    switch (sortBy) {\n        case 'experience':\n            filteredMechanics.sort((a, b) => parseInt(b.experience) - parseInt(a.experience));\n            break;\n        case 'reviews':\n            filteredMechanics.sort((a, b) => b.reviews - a.reviews);\n            break;\n        case 'price':\n            filteredMechanics.sort((a, b) => a.price - b.price);\n            break;\n        default:\n            filteredMechanics.sort((a, b) => b.rating - a.rating);\n    }\n\n    currentMechanicPage = 1;\n    displayMechanics();\n}\n\n// Profile sections\nfunction showProfileSection(sectionId) {\n    document.querySelectorAll('.profile-section').forEach(section => {\n        section.style.display = 'none';\n    });\n\n    document.getElementById(`profile-${sectionId}`).style.display = 'block';\n\n    document.querySelectorAll('.profile-link').forEach(link => {\n        link.classList.remove('active');\n    });\n\n    document.querySelector(`[onclick=\"showProfileSection('${sectionId}')\"]`).classList.add('active');\n}\n\n// Cart and Order functions\nasync function addToCart() {\n    if (!isLoggedIn) {\n        showLoginModal();\n        return;\n    }\n\n    const currentCount = parseInt(document.querySelector('.cart-count').textContent);\n    document.querySelector('.cart-count').textContent = currentCount + 1;\n    alert('Item added to cart!');\n}\n\n// Buy Now function\nasync function buyNow() {\n    if (!isLoggedIn) {\n        showLoginModal();\n        return;\n    }\n\n    // Get current product details from the detail page\n    const titleElement = document.getElementById('detail-title');\n    const priceElement = document.getElementById('detail-price');\n\n    if (!titleElement || !priceElement) {\n        alert('Product information not found');\n        return;\n    }\n\n    const productTitle = titleElement.textContent;\n    const productPrice = priceElement.textContent.replace(/[₦,]/g, '');\n\n    // Find the product in our listings array\n    const product = listings.find(p => p.title === productTitle);\n\n    if (!product) {\n        alert('Product not found in inventory');\n        return;\n    }\n\n    // Check inventory\n    const stockLevel = await getInventoryLevel(product.id);\n    if (stockLevel <= 0) {\n        alert('Sorry, this item is out of stock');\n        return;\n    }\n\n    const quantity = 1;\n    const confirmPurchase = confirm(\n        `Confirm purchase?\\n\\n` +\n        `Product: ${productTitle}\\n` +\n        `Price: ${priceElement.textContent}\\n` +\n        `Quantity: ${quantity}\\n` +\n        `Stock Available: ${stockLevel}\\n\\n` +\n        `Total: ${priceElement.textContent}`\n    );\n\n    if (confirmPurchase) {\n        await createOrder(product.id, quantity);\n    }\n}\n\n// Create order in Firestore\nasync function createOrder(productId, quantity = 1) {\n    if (!isLoggedIn) {\n        showLoginModal();\n        return;\n    }\n\n    try {\n        // Get product details\n        const productRef = db.collection('inventory').doc(String(productId));\n        const productDoc = await productRef.get();\n\n        if (!productDoc.exists) {\n            alert('Error: Product not found');\n            return;\n        }\n\n        const product = productDoc.data();\n        const totalPrice = product.price * quantity;\n\n        // Create order\n        const orderRef = await db.collection('orders').add({\n            userId: currentUser.uid,\n            productId: productId,\n            quantity: quantity,\n            totalPrice: totalPrice,\n            status: 'pending',\n            createdAt: firebase.firestore.FieldValue.serverTimestamp()\n        });\n\n        // Update inventory\n        await updateInventory(productId, -quantity);\n\n        alert(`Order created successfully! Order ID: ${orderRef.id}`);\n        return { id: orderRef.id };\n    } catch (error) {\n        console.error('Error creating order:', error);\n        alert('An error occurred while creating the order');\n    }\n}\n\n// Update inventory\nasync function updateInventory(productId, quantityChange) {\n    try {\n        const inventoryRef = db.collection('inventory').doc(productId);\n\n        await db.runTransaction(async (transaction) => {\n            const inventoryDoc = await transaction.get(inventoryRef);\n            if (!inventoryDoc.exists) {\n                transaction.set(inventoryRef, { stock_level: Math.max(0, quantityChange), updatedAt: firebase.firestore.FieldValue.serverTimestamp() });\n            } else {\n                const newStockLevel = inventoryDoc.data().stock_level + quantityChange;\n                transaction.update(inventoryRef, { stock_level: newStockLevel, updatedAt: firebase.firestore.FieldValue.serverTimestamp() });\n            }\n        });\n    } catch (error) {\n        console.error('Error updating inventory:', error);\n    }\n}\n\n// Get inventory level for a product\nasync function getInventoryLevel(productId) {\n    try {\n        const inventoryRef = db.collection('inventory').doc(productId);\n        const inventoryDoc = await inventoryRef.get();\n\n        if (!inventoryDoc.exists) {\n            return 0;\n        }\n\n        return inventoryDoc.data().stock_level;\n    } catch (error) {\n        console.error('Error getting inventory level:', error);\n        return 0;\n    }\n}\n\n// Subscribe to inventory changes\nfunction subscribeToInventoryChanges() {\n    db.collection('inventory').onSnapshot(snapshot => {\n        snapshot.docChanges().forEach(change => {\n            console.log('Inventory change:', change.doc.data());\n             if (document.getElementById('listings-grid')) {\n                    loadListings();\n                }\n        });\n    });\n}\n\n// Sticky price bar\nfunction handleStickyPrice() {\n    const detailInfo = document.querySelector('.detail-info');\n    const stickyBar = document.getElementById('sticky-price-bar');\n\n    if (detailInfo) {\n        const rect = detailInfo.getBoundingClientRect();\n        if (rect.bottom < 0) {\n            stickyBar.style.display = 'block';\n        } else {\n            stickyBar.style.display = 'none';\n        }\n    }\n}\n\n// Hero slider\nlet currentSlide = 0;\nconst slides = document.querySelectorAll('.hero-slide');\n\nfunction nextSlide() {\n    slides[currentSlide].classList.remove('active');\n    currentSlide = (currentSlide + 1) % slides.length;\n    slides[currentSlide].classList.add('active');\n}\n\nsetInterval(nextSlide, 4000);\n\n// Authentication functions\nfunction checkAuthAndNavigate(page) {\n    if (!isLoggedIn) {\n        showLoginModal();\n        return;\n    }\n    showPage(page);\n}\n\nfunction showLoginModal() {\n    document.getElementById('login-modal').classList.add('active');\n}\n\nfunction showSignupModal() {\n    document.getElementById('signup-modal').classList.add('active');\n}\n\nfunction closeModal(modalId) {\n    document.getElementById(modalId).classList.remove('active');\n}\n\nfunction switchToSignup() {\n    closeModal('login-modal');\n    showSignupModal();\n}\n\nfunction switchToLogin() {\n    closeModal('signup-modal');\n    showLoginModal();\n}\n\nasync function handleLogin(event) {\n    event.preventDefault();\n    const email = document.getElementById('login-email').value;\n    const password = document.getElementById('login-password').value;\n\n    if (!email || !password) {\n        alert('Please fill in all fields');\n        return;\n    }\n\n    try {\n        const userCredential = await auth.signInWithEmailAndPassword(email, password);\n        const user = userCredential.user;\n        const userProfile = await db.collection('users').doc(user.uid).get();\n\n        isLoggedIn = true;\n        currentUser = { uid: user.uid, email: user.email, ...userProfile.data() };\n        updateAuthUI();\n\n        alert('Login successful! Welcome to Mechanic Village.');\n        closeModal('login-modal');\n    } catch (error) {\n        alert('Login failed: ' + error.message);\n    }\n}\n\nasync function handleSignup(event) {\n    event.preventDefault();\n    console.log('handleSignup called');\n    const name = document.getElementById('signup-name').value;\n    const email = document.getElementById('signup-email').value;\n    const phone = document.getElementById('signup-phone').value;\n    const password = document.getElementById('signup-password').value;\n    const location = document.getElementById('signup-location').value;\n\n    console.log('Signup form values:', { name, email, phone, location });\n\n    if (!name || !email || !phone || !password || !location) {\n        console.error('Validation failed: A field is empty');\n        alert('Please fill in all fields');\n        return;\n    }\n\n    try {\n        console.log('Calling createUserWithEmailAndPassword...');\n        const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n        const user = userCredential.user;\n        const role = document.getElementById('signup-role').value;\n\n        // Update Firebase Auth profile\n        await user.updateProfile({\n            displayName: name\n        });\n\n        const userProfile = {\n            name: name,\n            phone: phone,\n            location: location,\n            role: role\n        };\n\n        if (role === 'mechanic') {\n            userProfile.specialization = '';\n            userProfile.experience = '';\n            userProfile.price_per_hour = 0;\n            userProfile.rating = 0;\n            userProfile.reviews = 0;\n            userProfile.services = [];\n        }\n\n        // Add user profile to Firestore\n        await db.collection('users').doc(user.uid).set(userProfile);\n\n        // Manually update UI after signup\n        isLoggedIn = true;\n        currentUser = { uid: user.uid, email: user.email, ...userProfile };\n        updateAuthUI();\n\n        closeModal('signup-modal');\n        alert('Account created successfully! Welcome to Mechanic Village.');\n    } catch (error) {\n        alert('Signup failed: ' + error.message);\n    }\n}\n\nasync function logout() {\n    try {\n        await auth.signOut();\n        showPage('home');\n        alert('You have been logged out successfully.');\n    } catch (error) {\n        console.error('Logout error:', error);\n    }\n}\n\nfunction updateAuthUI() {\n    const guestButtons = document.getElementById('auth-buttons-guest');\n    const userButtons = document.getElementById('auth-buttons-user');\n    const userName = document.getElementById('user-name');\n    const mechanicProfileEditor = document.getElementById('mechanic-profile-editor');\n\n    // Navigation elements\n    const navListings = document.getElementById('nav-listings');\n    const navProfile = document.getElementById('nav-profile');\n    const mobileNavListings = document.getElementById('mobile-nav-listings');\n    const mobileNavProfile = document.getElementById('mobile-nav-profile');\n    const mobileNavCart = document.getElementById('mobile-nav-cart');\n\n    if (isLoggedIn) {\n        // Show user buttons, hide guest buttons\n        guestButtons.style.display = 'none';\n        userButtons.style.display = 'flex';\n        userName.textContent = currentUser.name;\n\n        // Show member-only navigation items\n        navListings.style.display = 'block';\n        document.getElementById('nav-mechanics').style.display = 'block';\n        navProfile.style.display = 'block';\n        mobileNavListings.style.display = 'block';\n        document.getElementById('mobile-nav-mechanics').style.display = 'block';\n        mobileNavProfile.style.display = 'block';\n        mobileNavCart.style.display = 'block';\n\n        if (currentUser.role === 'mechanic') {\n            mechanicProfileEditor.style.display = 'block';\n            document.getElementById('mechanic-specialization').value = currentUser.specialization || '';\n            document.getElementById('mechanic-experience').value = currentUser.experience || '';\n            document.getElementById('mechanic-price').value = currentUser.price_per_hour || '';\n            document.getElementById('mechanic-services').value = (currentUser.services || []).join(', ');\n            document.getElementById('create-listing-btn').style.display = 'block';\n        }\n\n    } else {\n        // Show guest buttons, hide user buttons\n        guestButtons.style.display = 'flex';\n        userButtons.style.display = 'none';\n\n        // Hide member-only navigation items\n        navListings.style.display = 'none';\n        document.getElementById('nav-mechanics').style.display = 'none';\n        navProfile.style.display = 'none';\n        mobileNavListings.style.display = 'none';\n        document.getElementById('mobile-nav-mechanics').style.display = 'none';\n        mobileNavProfile.style.display = 'none';\n        mobileNavCart.style.display = 'none';\n    }\n}\n\n// Hero search functionality\ndocument.querySelector('.hero-search-btn').addEventListener('click', function () {\n    const searchTerm = document.querySelector('.hero-search-input').value;\n    if (searchTerm) {\n        // Filter listings by search term\n        filteredListings = listings.filter(listing =>\n            listing.title.toLowerCase().includes(searchTerm.toLowerCase())\n        );\n        currentPage = 1;\n        showPage('listings', {\n            skipLoad: true\n        });\n        displayListings();\n    }\n});\n\n// Enter key support for hero search\ndocument.querySelector('.hero-search-input').addEventListener('keypress', function (e) {\n    if (e.key === 'Enter') {\n        document.querySelector('.hero-search-btn').click();\n    }\n});\n\n// Form submissions\ndocument.getElementById('mechanic-profile-editor').querySelector('form').addEventListener('submit', async function (e) {\n    e.preventDefault();\n    if (!isLoggedIn || currentUser.role !== 'mechanic') {\n        return;\n    }\n\n    const specialization = document.getElementById('mechanic-specialization').value;\n    const experience = document.getElementById('mechanic-experience').value;\n    const price = parseInt(document.getElementById('mechanic-price').value);\n    const services = document.getElementById('mechanic-services').value.split(',').map(s => s.trim());\n\n    try {\n        await db.collection('users').doc(currentUser.uid).update({\n            specialization: specialization,\n            experience: experience,\n            price_per_hour: price,\n            services: services\n        });\n        alert('Mechanic profile updated successfully!');\n    } catch (error) {\n        console.error('Error updating mechanic profile:', error);\n        alert('An error occurred while updating your profile.');\n    }\n});\n\ndocument.querySelector('.sell-form form').addEventListener('submit', function (e) {\n    e.preventDefault();\n    const vendorId = document.getElementById('vendor-select').value;\n    const vendor = vendors.find(v => v.id == vendorId);\n    vendor.products++;\n    alert(`Product listed for ${vendor.name}! They now have ${vendor.products} products.`);\n});\n\n// Load featured products on home page\nasync function loadFeaturedProducts() {\n    const homeGrid = document.getElementById('home-listings-grid');\n    if (!homeGrid) return;\n\n    try {\n        const featuredProductsSnapshot = await db.collection('products').orderBy('views', 'desc').limit(10).get();\n        homeGrid.innerHTML = '';\n\n        featuredProductsSnapshot.forEach(doc => {\n            const product = doc.data();\n            const listing = {\n                id: doc.id,\n                title: product.name,\n                price: product.price,\n                location: product.location,\n                views: product.views,\n                image: product.image || '🔧',\n                brand: product.brand,\n                description: product.description\n            };\n            const card = createListingCard(listing);\n            homeGrid.appendChild(card);\n        });\n    } catch (error) {\n        console.error('Error loading featured products:', error);\n        loadFeaturedProductsFromMock();\n    }\n}\n\n// Fallback function for featured products\nfunction loadFeaturedProductsFromMock() {\n    const homeGrid = document.getElementById('home-listings-grid');\n    if (!homeGrid) return;\n\n    homeGrid.innerHTML = '';\n\n    // Show first 10 products as featured\n    const featuredProducts = listings.slice(0, 10);\n\n    featuredProducts.forEach(listing => {\n        const card = createListingCard(listing);\n        homeGrid.appendChild(card);\n    });\n}\n\n// AI Diagnosis functionality\nfunction runAIDiagnosis() {\n    const symptom = document.getElementById('diagnosis-input').value;\n    const carMake = document.getElementById('car-make').value;\n    const carYear = document.getElementById('car-year').value;\n\n    if (!symptom.trim()) {\n        alert('Please describe your car problem first.');\n        return;\n    }\n\n    // Show loading state\n    const btn = document.querySelector('.ai-diagnose-btn');\n    const originalText = btn.innerHTML;\n    btn.innerHTML = '🔄 Analyzing...';\n    btn.disabled = true;\n\n    // Simulate AI processing\n    setTimeout(() => {\n        const diagnosis = generateDiagnosis(symptom, carMake, carYear);\n        displayDiagnosisResults(diagnosis);\n\n        // Reset button\n        btn.innerHTML = originalText;\n        btn.disabled = false;\n    }, 2000);\n}\n\nfunction generateDiagnosis(symptom, carMake, carYear) {\n    // Simple AI simulation based on keywords\n    const symptomLower = symptom.toLowerCase();\n\n    let diagnosis = {\n        problem: '',\n        parts: [],\n        confidence: 75\n    };\n\n    if (symptomLower.includes('squeak') || symptomLower.includes('brake')) {\n        diagnosis.problem = 'Worn brake pads causing metal-to-metal contact';\n        diagnosis.parts = [\n            { name: 'Premium Brake Pads Set', price: 25000 },\n            { name: 'Brake Disc Rotors', price: 35000 }\n        ];\n        diagnosis.confidence = 85;\n    } else if (symptomLower.includes('engine') || symptomLower.includes('start')) {\n        diagnosis.problem = 'Engine starting issues - likely spark plugs or battery';\n        diagnosis.parts = [\n            { name: 'Spark Plugs Set', price: 15000 },\n            { name: 'Car Battery', price: 45000 }\n        ];\n        diagnosis.confidence = 78;\n    } else if (symptomLower.includes('oil') || symptomLower.includes('leak')) {\n        diagnosis.problem = 'Oil system issue - filter or gasket replacement needed';\n        diagnosis.parts = [\n            { name: 'Engine Oil Filter', price: 8500 },\n            { name: 'Oil Pan Gasket', price: 12000 }\n        ];\n        diagnosis.confidence = 82;\n    } else if (symptomLower.includes('tire') || symptomLower.includes('wheel')) {\n        diagnosis.problem = 'Tire or wheel alignment issues';\n        diagnosis.parts = [\n            { name: 'Tire Set (4pcs)', price: 120000 },\n            { name: 'Wheel Alignment Kit', price: 25000 }\n        ];\n        diagnosis.confidence = 70;\n    } else {\n        diagnosis.problem = 'General maintenance required - multiple components may need attention';\n        diagnosis.parts = [\n            { name: 'Air Filter', price: 8000 },\n            { name: 'Engine Oil Filter', price: 8500 },\n            { name: 'Spark Plugs Set', price: 15000 }\n        ];\n        diagnosis.confidence = 65;\n    }\n\n    return diagnosis;\n}\n\nfunction displayDiagnosisResults(diagnosis) {\n    const resultsDiv = document.getElementById('diagnosis-results');\n    const problemDiv = document.getElementById('diagnosed-problem');\n    const partsListDiv = document.getElementById('recommended-parts-list');\n    const confidenceFill = document.getElementById('confidence-fill');\n    const confidencePercentage = document.getElementById('confidence-percentage');\n\n    // Add celebration animation to AI icon\n    const aiIcon = document.querySelector('.ai-icon');\n    aiIcon.classList.add('celebration');\n    setTimeout(() => aiIcon.classList.remove('celebration'), 1000);\n\n    // Update problem description\n    problemDiv.textContent = diagnosis.problem;\n\n    // Update parts list\n    partsListDiv.innerHTML = '';\n    diagnosis.parts.forEach(part => {\n        const partDiv = document.createElement('div');\n        partDiv.className = 'part-item';\n        partDiv.innerHTML = `\n                    <span class=\"part-name\">${part.name}</span>\n                    <span class=\"part-price\">₦${part.price.toLocaleString()}</span>\n                `;\n        partDiv.onclick = () => {\n            // Find the part in listings and show details\n            const listing = listings.find(l => l.title === part.name);\n            if (listing) {\n                showListingDetail(listing);\n            }\n        };\n        partsListDiv.appendChild(partDiv);\n    });\n\n    // Update confidence\n    confidenceFill.style.width = diagnosis.confidence + '%';\n    confidencePercentage.textContent = diagnosis.confidence + '%';\n\n    // Show results\n    resultsDiv.style.display = 'block';\n    resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n}\n\n// Footer link functions\nfunction openWhatsApp() {\n    window.open('https://wa.me/12257884475?text=Hello%20Mechanic%20Village!%20I%20need%20help%20with...', '_blank', 'noopener,noreferrer');\n}\n\nfunction openEmail() {\n    window.open('mailto:support@mechanicvillage.ng?subject=Support%20Request&body=Hello%20Mechanic%20Village%20Team,%0A%0AI%20need%20help%20with...', '_blank', 'noopener,noreferrer');\n}\n\nfunction openPhone() {\n    window.open('tel:+2348006324264', '_blank', 'noopener,noreferrer');\n}\n\nfunction handleContactForm(event) {\n    event.preventDefault();\n    alert('Thank you for your message! We will get back to you within 24 hours.');\n}\n\n// Chatbot functionality\nlet chatbotOpen = false;\nlet chatbotMessages = [];\n\nfunction toggleChatbot() {\n    const toggle = document.querySelector('.chatbot-toggle');\n    const window = document.getElementById('chatbot-window');\n\n    chatbotOpen = !chatbotOpen;\n\n    if (chatbotOpen) {\n        toggle.classList.add('active');\n        toggle.textContent = '✕';\n        window.classList.add('active');\n    } else {\n        toggle.classList.remove('active');\n        toggle.textContent = '💬';\n        window.classList.remove('active');\n    }\n}\n\nfunction sendChatbotMessage() {\n    const input = document.getElementById('chatbot-input');\n    const message = input.value.trim();\n\n    if (!message) return;\n\n    addChatbotMessage(message, 'user');\n    input.value = '';\n\n    // Show typing indicator\n    showTypingIndicator();\n\n    // Simulate bot response\n    setTimeout(() => {\n        hideTypingIndicator();\n        const response = generateChatbotResponse(message);\n        addChatbotMessage(response.text, 'bot', response.suggestions);\n    }, 1500);\n}\n\nfunction sendSuggestion(suggestion) {\n    document.getElementById('chatbot-input').value = suggestion;\n    sendChatbotMessage();\n}\n\nfunction handleChatbotKeypress(event) {\n    if (event.key === 'Enter') {\n        sendChatbotMessage();\n    }\n}\n\nfunction addChatbotMessage(text, sender, suggestions = []) {\n    const messagesContainer = document.getElementById('chatbot-messages');\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `chatbot-message ${sender}`;\n    messageDiv.textContent = text;\n\n    if (suggestions && suggestions.length > 0) {\n        const suggestionsDiv = document.createElement('div');\n        suggestionsDiv.className = 'chatbot-suggestions';\n\n        suggestions.forEach(suggestion => {\n            const suggestionBtn = document.createElement('div');\n            suggestionBtn.className = 'chatbot-suggestion';\n            suggestionBtn.textContent = suggestion.text;\n            suggestionBtn.onclick = () => {\n                if (suggestion.action) {\n                    suggestion.action();\n                } else {\n                    sendSuggestion(suggestion.text);\n                }\n            };\n            suggestionsDiv.appendChild(suggestionBtn);\n        });\n\n        messageDiv.appendChild(suggestionsDiv);\n    }\n\n    messagesContainer.appendChild(messageDiv);\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n}\n\nfunction showTypingIndicator() {\n    document.getElementById('chatbot-typing').classList.add('active');\n    const messagesContainer = document.getElementById('chatbot-messages');\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n}\n\nfunction hideTypingIndicator() {\n    document.getElementById('chatbot-typing').classList.remove('active');\n}\n\nfunction generateChatbotResponse(message) {\n    const messageLower = message.toLowerCase();\n\n    // Parts search\n    if (messageLower.includes('brake') || messageLower.includes('pad')) {\n        return {\n            text: \"I found several brake pad options for you! Here are some popular choices:\",\n            suggestions: [\n                { text: \"View brake pads\", action: () => { toggleChatbot(); showPage('listings'); } },\n                { text: \"Toyota brake pads\", action: () => sendSuggestion(\"Show me Toyota brake pads\") },\n                { text: \"Price range?\", action: () => sendSuggestion(\"What's the price range for brake pads?\") }\n            ]\n        };\n    }\n\n    // Mechanic search\n    if (messageLower.includes('mechanic') || messageLower.includes('repair')) {\n        return {\n            text: \"I can help you find qualified mechanics in your area! We have specialists for all types of repairs.\",\n            suggestions: [\n                { text: \"Find mechanics\", action: () => { toggleChatbot(); checkAuthAndNavigate('mechanics'); } },\n                { text: \"Engine specialist\", action: () => sendSuggestion(\"Find engine specialist near me\") },\n                { text: \"Brake specialist\", action: () => sendSuggestion(\"Find brake specialist near me\") }\n            ]\n        };\n    }\n\n    // Selling\n    if (messageLower.includes('sell') || messageLower.includes('list')) {\n        return {\n            text: \"Great! Selling parts on Mechanic Village is easy. You can list your parts and reach thousands of buyers.\",\n            suggestions: [\n                { text: \"Start selling\", action: () => { toggleChatbot(); checkAuthAndNavigate('sell'); } },\n                { text: \"Selling tips\", action: () => sendSuggestion(\"What are some tips for selling parts?\") },\n                { text: \"Pricing guide\", action: () => sendSuggestion(\"How should I price my parts?\") }\n            ]\n        };\n    }\n\n    // Pricing\n    if (messageLower.includes('price') || messageLower.includes('cost')) {\n        return {\n            text: \"Prices vary depending on the part and brand. Here are some typical ranges:\\n• Brake pads: ₦15,000 - ₦35,000\\n• Batteries: ₦25,000 - ₦65,000\\n• Filters: ₦5,000 - ₦15,000\",\n            suggestions: [\n                { text: \"Browse all parts\", action: () => { toggleChatbot(); checkAuthAndNavigate('listings'); } },\n                { text: \"Compare prices\", action: () => sendSuggestion(\"How do I compare prices?\") }\n            ]\n        };\n    }\n\n    // Help/Support\n    if (messageLower.includes('help') || messageLower.includes('support') || messageLower.includes('problem')) {\n        return {\n            text: \"I'm here to help! You can also contact our support team for more detailed assistance.\",\n            suggestions: [\n                { text: \"Contact support\", action: () => { toggleChatbot(); showPage('contact-us'); } },\n                { text: \"Help center\", action: () => { toggleChatbot(); showPage('help-center'); } },\n                { text: \"WhatsApp support\", action: () => openWhatsApp() }\n            ]\n        };\n    }\n\n    // Account/Login\n    if (messageLower.includes('account') || messageLower.includes('login') || messageLower.includes('sign')) {\n        return {\n            text: \"You need an account to buy parts, find mechanics, and sell items. It's free and takes just a minute!\",\n            suggestions: [\n                { text: \"Create account\", action: () => { toggleChatbot(); showSignupModal(); } },\n                { text: \"Login\", action: () => { toggleChatbot(); showLoginModal(); } },\n                { text: \"Account benefits\", action: () => sendSuggestion(\"What are the benefits of having an account?\") }\n            ]\n        };\n    }\n\n    // AI Diagnosis\n    if (messageLower.includes('diagnos') || messageLower.includes('problem') || messageLower.includes('noise') || messageLower.includes('issue')) {\n        return {\n            text: \"Our AI diagnosis tool can help identify car problems! Just describe your symptoms and get instant recommendations.\",\n            suggestions: [\n                { text: \"Try AI diagnosis\", action: () => { toggleChatbot(); showPage('home'); document.getElementById('diagnosis-input').focus(); } },\n                { text: \"Common problems\", action: () => sendSuggestion(\"What are common car problems?\") }\n            ]\n        };\n    }\n\n    // Default response\n    return {\n        text: \"I can help you with finding parts, mechanics, selling items, or general questions about Mechanic Village. What would you like to know?\",\n        suggestions: [\n            { text: \"Find parts\", action: () => { toggleChatbot(); checkAuthAndNavigate('listings'); } },\n            { text: \"Find mechanics\", action: () => { toggleChatbot(); checkAuthAndNavigate('mechanics'); } },\n            { text: \"Sell parts\", action: () => { toggleChatbot(); checkAuthAndNavigate('sell'); } },\n            { text: \"Get help\", action: () => { toggleChatbot(); showPage('help-center'); } }\n        ]\n    };\n}\n\n// Sample vendors data\nconst vendors = [\n    { id: 1, name: 'Adekunle Auto Parts', location: 'Lagos', products: 15, avatar: 'A' },\n    { id: 2, name: 'Bisi Motors', location: 'Abuja', products: 25, avatar: 'B' },\n    { id: 3, name: 'Chinedu Spare Parts', location: 'Kano', products: 10, avatar: 'C' },\n    { id: 4, name: 'Danjuma Enterprises', location: 'Ibadan', products: 30, avatar: 'D' }\n];\n\n// Load vendors\nfunction loadVendors() {\n    const grid = document.getElementById('vendors-grid');\n    if (!grid) return;\n\n    grid.innerHTML = '';\n\n    vendors.forEach(vendor => {\n        const card = createVendorCard(vendor);\n        grid.appendChild(card);\n    });\n}\n\nfunction createVendorCard(vendor) {\n    const card = document.createElement('div');\n    card.className = 'vendor-card';\n\n    card.innerHTML = `\n        <div class=\"vendor-avatar\">${vendor.avatar}</div>\n        <div class=\"vendor-name\">${vendor.name}</div>\n        <div class=\"vendor-location\">📍 ${vendor.location}</div>\n        <div class=\"vendor-products\">${vendor.products} products</div>\n    `;\n\n    return card;\n}\n\n// Initialize the app when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (typeof loadListings === 'function') {\n        loadListings();\n    } else {\n        loadListingsFromMock();\n    }\n    if (typeof loadMechanics === 'function') {\n        loadMechanics();\n    } else {\n        loadMechanicsFromMock();\n    }\n    if (typeof loadFeaturedProducts === 'function') {\n        loadFeaturedProducts();\n    } else {\n        loadFeaturedProductsFromMock();\n    }\n    if (typeof subscribeToInventoryChanges === 'function') {\n        subscribeToInventoryChanges();\n    }\n    loadVendors();\n    populateVendorSelect();\n});\n\n// Populate vendor select dropdown\nfunction populateVendorSelect() {\n    const select = document.getElementById('vendor-select');\n    if (!select) return;\n\n    vendors.forEach(vendor => {\n        const option = document.createElement('option');\n        option.value = vendor.id;\n        option.textContent = vendor.name;\n        select.appendChild(option);\n    });\n}\n\n// Message Modal\nfunction showMessageModal() {\n    if (!isLoggedIn) {\n        showLoginModal();\n        return;\n    }\n    document.getElementById('message-modal').classList.add('active');\n}\n\nfunction handleMessageSend(event) {\n    event.preventDefault();\n    const message = document.getElementById('message-text').value;\n    if (message) {\n        alert('Message sent successfully!');\n        closeModal('message-modal');\n        document.getElementById('message-text').value = '';\n    }\n}\n\n// Mobile menu toggle\ndocument.querySelector('.mobile-menu-toggle').addEventListener('click', () => {\n    document.querySelector('.mobile-nav').classList.toggle('active');\n});\n\n// Create Listing Form Submission\ndocument.getElementById('create-listing-form').addEventListener('submit', async (event) => {\n    event.preventDefault();\n    if (!isLoggedIn) {\n        showLoginModal();\n        return;\n    }\n\n    const name = document.getElementById('listing-name').value;\n    const description = document.getElementById('listing-description').value;\n    const price = parseFloat(document.getElementById('listing-price').value);\n\n    if (!name || !description || !price) {\n        alert('Please fill in all fields.');\n        return;\n    }\n\n    try {\n        await db.collection('inventory').add({\n            name: name,\n            description: description,\n            price: price,\n            sellerId: currentUser.uid,\n            location: currentUser.location || 'Unknown',\n            views: 0,\n            image: '📦', // Default image\n            createdAt: firebase.firestore.FieldValue.serverTimestamp()\n        });\n\n        alert('Listing created successfully!');\n        document.getElementById('create-listing-form').reset();\n        showPage('profile');\n    } catch (error) {\n        console.error('Error creating listing:', error);\n        alert('Failed to create listing. Please try again.');\n    }\n});\n","size_bytes":50296},"verify_mobile.py":{"content":"\nimport asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        context = await browser.new_context(\n            viewport={'width': 375, 'height': 667},\n            is_mobile=True,\n            user_agent='Mozilla/5.0 (iPhone; CPU iPhone OS 13_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1'\n        )\n        page = await context.new_page()\n\n        try:\n            # Navigate to the app\n            await page.goto(\"http://localhost:8000\")\n\n            # Wait for the page to load\n            await page.wait_for_load_state('networkidle')\n\n            # Take a screenshot\n            await page.screenshot(path='screenshot_mobile.png')\n            print(\"Screenshot saved as screenshot_mobile.png\")\n\n        except Exception as e:\n            print(f\"An error occurred during verification: {e}\")\n            await page.screenshot(path='verification_error.png')\n            print(\"Error screenshot saved as verification_error.png\")\n\n        finally:\n            await browser.close()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n","size_bytes":1203},"replit.md":{"content":"# Mechanic Village - Auto Parts Marketplace\n\n## Overview\nMechanic Village is a modern, responsive single-page application (SPA) designed as a marketplace for automotive parts and services. It is built with vanilla HTML, CSS, and JavaScript, and powered by Google Firebase for backend services.\n\n## Tech Stack\n- **Frontend**: HTML5, CSS3, Vanilla JavaScript (ES6+)\n- **Backend**: Google Firebase\n  - Firestore: Database and real-time data synchronization\n  - Firebase Authentication: User management\n  - Firebase Hosting: Deployment (optional)\n- **Server**: Python 3.11 HTTP server for local development\n\n## Project Structure\n- `index.html` - Main HTML file with all page sections\n- `style.css` - All styles for the application\n- `script.js` - JavaScript logic, Firebase integration, and interactivity\n- `firebase.json` - Firebase hosting configuration\n- `server.py` - Python HTTP server with cache control for development\n\n## Key Features\n- User Authentication (signup/login)\n- Dynamic Product Listings with filters\n- Mechanic Directory\n- AI-Powered Car Diagnosis\n- Real-time Inventory via Firestore\n- Shopping Cart and Purchase Flow\n- User Profiles\n- Responsive Design (mobile/tablet/desktop)\n- Customer Support Chatbot\n\n## Firebase Configuration\nThe Firebase project is already configured in `script.js`. The application connects to the live Firebase project `mechanic-db779`.\n\n**Note**: Firebase API keys in client-side code are public by design. Security is enforced through Firebase Security Rules on the backend, not by hiding the API key.\n\n## Development Setup\nThe application runs on a Python HTTP server on port 5000 with cache control headers to ensure changes are immediately visible during development.\n\n## Recent Changes (October 23, 2025)\n- Imported from GitHub\n- Set up Python HTTP server with no-cache headers for Replit environment\n- Configured workflow for automatic server startup\n- Added .gitignore for Python and Firebase files\n- Server configured to bind to 0.0.0.0:5000 for Replit compatibility\n\n## Architecture Notes\n- Single-page application with client-side routing\n- Firebase handles all backend operations (auth, database)\n- Static file serving with cache control for development\n- No build step required - pure HTML/CSS/JS\n","size_bytes":2252},"server.py":{"content":"#!/usr/bin/env python3\nimport http.server\nimport socketserver\nimport os\n\nPORT = 5000\nHOST = \"0.0.0.0\"\n\nclass NoCacheHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def end_headers(self):\n        self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')\n        self.send_header('Pragma', 'no-cache')\n        self.send_header('Expires', '0')\n        super().end_headers()\n\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\n\nwith socketserver.TCPServer((HOST, PORT), NoCacheHTTPRequestHandler) as httpd:\n    print(f\"Server running at http://{HOST}:{PORT}/\")\n    httpd.serve_forever()\n","size_bytes":614}},"version":2}